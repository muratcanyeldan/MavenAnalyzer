{"ast":null,"code":"import React,{useMemo}from'react';import{ResponsiveBar}from'@nivo/bar';import{Box,Typography,CircularProgress}from'@mui/material';/**\n * Vulnerability Bar Chart component using Nivo\n * \n * @param {Object} props - Component props\n * @param {Object} props.data - Either analysis data object or bar chart data from API\n * @param {boolean} props.loading - Loading state\n * @param {number} props.height - Chart height in pixels\n */import{jsx as _jsx}from\"react/jsx-runtime\";const VulnerabilityChart=_ref=>{let{data,loading,height=300}=_ref;// Process data to get vulnerability counts by severity - moved to top level before any returns\nconst vulnerabilityData=useMemo(()=>{// Check if we have the new API data format\nif(data!==null&&data!==void 0&&data.data&&Array.isArray(data.data)){// We have data from the chart data API\nreturn data.data;}// Fallback to the old format (analysis object with dependencies)\n// If no data or dependencies, return empty array\nif(!data||!data.dependencies){return[];}// Initialize counters for each severity level\nconst counts={Critical:0,High:0,Medium:0,Low:0,None:0};// Count vulnerabilities by severity\ndata.dependencies.forEach(dependency=>{if(dependency.vulnerabilities){dependency.vulnerabilities.forEach(vuln=>{// Extract severity from the vulnerability - assuming this exists in your data\n// If not, you might need to adapt this based on your actual data structure\nconst severity=vuln.severity||'Unknown';if(counts[severity]!==undefined){counts[severity]++;}});}});// Convert to the format expected by the bar chart\nreturn Object.keys(counts).filter(key=>counts[key]>0&&key!=='None')// Only include non-zero values and exclude 'None'\n.map(key=>({severity:key,category:key,// Added for compatibility with the new API format\ncount:counts[key],color:getColorForSeverity(key)}));},[data]);// Return loading indicator if data is loading\nif(loading){return/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',alignItems:'center',height},children:/*#__PURE__*/_jsx(CircularProgress,{})});}// Return message if no data available\nif(!(data!==null&&data!==void 0&&data.data)&&!(data!==null&&data!==void 0&&data.dependencies)||vulnerabilityData.length===0){return/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',alignItems:'center',height,p:2},children:/*#__PURE__*/_jsx(Typography,{color:\"text.secondary\",children:\"No vulnerability data available\"})});}return/*#__PURE__*/_jsx(Box,{sx:{height},children:/*#__PURE__*/_jsx(ResponsiveBar,{data:vulnerabilityData,keys:(data===null||data===void 0?void 0:data.keys)||['count'],indexBy:data!==null&&data!==void 0&&data.data?'category':'severity',margin:{top:40,right:50,bottom:40,left:60},padding:0.3,valueScale:{type:'linear'},indexScale:{type:'band',round:true},colors:_ref2=>{let{data}=_ref2;return data.color;},borderColor:{from:'color',modifiers:[['darker',1.6]]},axisTop:null,axisRight:null,axisBottom:{tickSize:5,tickPadding:5,tickRotation:0,legend:'Severity',legendPosition:'middle',legendOffset:32},axisLeft:{tickSize:5,tickPadding:5,tickRotation:0,legend:'Count',legendPosition:'middle',legendOffset:-40},labelSkipWidth:12,labelSkipHeight:12,labelTextColor:{from:'color',modifiers:[['darker',1.6]]},animate:true,motionStiffness:90,motionDamping:15})});};// Helper function to get color based on severity\nfunction getColorForSeverity(severity){switch(severity){case'Critical':return'#d32f2f';// dark red\ncase'High':return'#f44336';// red\ncase'Medium':return'#ff9800';// orange\ncase'Low':return'#ffeb3b';// yellow\ndefault:return'#9e9e9e';// grey\n}}export default VulnerabilityChart;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}