{"ast":null,"code":"// Utility functions for date formatting\n/**\n * Formats a date string into a more readable format\n * @param {string} dateString - The date string to format (ISO format)\n * @param {boolean} includeTime - Whether to include time in the formatted date\n * @returns {string} The formatted date string\n */export const formatDate=function(dateString){let includeTime=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!dateString){return'N/A';}try{const date=new Date(dateString);if(isNaN(date)){return dateString;}const options={year:'numeric',month:'short',day:'numeric',...(includeTime&&{hour:'2-digit',minute:'2-digit'})};return date.toLocaleDateString(undefined,options);}catch(error){console.error('Error formatting date:',error);return dateString;}};/**\n * Calculates the relative time (e.g., \"2 days ago\", \"just now\")\n * @param {string} dateString - The date string to format (ISO format)\n * @returns {string} The relative time string\n */export const getRelativeTime=dateString=>{if(!dateString){return'N/A';}try{const date=new Date(dateString);if(isNaN(date)){return dateString;}const now=new Date();const diff=now-date;// Less than a minute\nif(diff<60*1000){return'just now';}// Less than an hour\nif(diff<60*60*1000){const minutes=Math.floor(diff/(60*1000));return`${minutes} minute${minutes!==1?'s':''} ago`;}// Less than a day\nif(diff<24*60*60*1000){const hours=Math.floor(diff/(60*60*1000));return`${hours} hour${hours!==1?'s':''} ago`;}// Less than a week\nif(diff<7*24*60*60*1000){const days=Math.floor(diff/(24*60*60*1000));return`${days} day${days!==1?'s':''} ago`;}// Otherwise, return formatted date\nreturn formatDate(dateString);}catch(error){console.error('Error calculating relative time:',error);return dateString;}};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}