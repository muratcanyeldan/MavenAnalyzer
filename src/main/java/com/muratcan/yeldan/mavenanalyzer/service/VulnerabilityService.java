package com.muratcan.yeldan.mavenanalyzer.service;

import com.muratcan.yeldan.mavenanalyzer.dto.response.VulnerabilityResponse;
import com.muratcan.yeldan.mavenanalyzer.entity.DependencyAnalysis;

import java.util.List;
import java.util.concurrent.CompletableFuture;

public interface VulnerabilityService {

    /**
     * Check for vulnerabilities in a specific Maven dependency
     *
     * @param groupId    The Maven group ID
     * @param artifactId The Maven artifact ID
     * @param version    The version of the dependency
     * @return List of vulnerabilities found
     */
    List<VulnerabilityResponse> checkVulnerabilities(String groupId, String artifactId, String version);

    /**
     * Asynchronously check for vulnerabilities in a specific Maven dependency
     *
     * @param groupId    The Maven group ID
     * @param artifactId The Maven artifact ID
     * @param version    The version of the dependency
     * @param analysisId The ID of the analysis this check is part of
     * @return A CompletableFuture that will be completed with the list of vulnerabilities found
     */
    CompletableFuture<List<VulnerabilityResponse>> checkVulnerabilitiesAsync(
            String groupId, String artifactId, String version, Long analysisId);

    /**
     * Manually clear the cache for a specific dependency
     *
     * @param groupId    The Maven group ID
     * @param artifactId The Maven artifact ID
     * @param version    The version of the dependency
     */
    void clearVulnerabilityCache(String groupId, String artifactId, String version);
    
    void clearAllVulnerabilityCaches();

    /**
     * Process all dependencies for an analysis in batches and check for vulnerabilities
     * This is more efficient than checking each dependency individually
     *
     * @param analysisId The ID of the analysis to process
     */
    void processDependenciesInBatches(Long analysisId);

    void checkAndUpdateAnalysisStatus(Long analysisId);

    DependencyAnalysis getAnalysisWithFreshTransaction(Long analysisId);

    void updateDependencyVulnerabilities(String groupId, String artifactId, String version, Long analysisId, List<VulnerabilityResponse> vulnerabilities);
} 