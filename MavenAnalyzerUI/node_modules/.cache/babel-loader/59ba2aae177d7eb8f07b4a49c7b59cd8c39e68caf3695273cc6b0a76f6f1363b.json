{"ast":null,"code":"import axios from 'axios';\n\n// Define API base URL with full URL path\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api' : 'http://localhost:8080/api'; // Always use absolute URL in development\n\nconsole.log('API Base URL:', API_BASE_URL); // Debug logging\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for auth tokens, etc.\napiClient.interceptors.request.use(config => {\n  // You can add auth tokens here when you implement authentication\n  // const token = localStorage.getItem('token');\n  // if (token) {\n  //   config.headers.Authorization = `Bearer ${token}`;\n  // }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor for error handling\napiClient.interceptors.response.use(response => response, error => {\n  // Handle common errors\n  if (error.response) {\n    // Server responded with error status\n    console.error('API Error:', error.response.data);\n\n    // Handle specific status codes\n    switch (error.response.status) {\n      case 401:\n        // Handle unauthorized\n        console.log('Unauthorized access');\n        // Redirect to login or refresh token\n        break;\n      case 404:\n        console.log('Resource not found');\n        break;\n      default:\n        break;\n    }\n  } else if (error.request) {\n    // Request made but no response\n    console.error('No response received:', error.request);\n  } else {\n    // Error in request setup\n    console.error('Request error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// API Methods\nconst api = {\n  // Project endpoints\n  projects: {\n    getAll: () => apiClient.get('/projects'),\n    getById: id => apiClient.get(`/projects/${id}`),\n    create: data => apiClient.post('/projects', data),\n    update: (id, data) => apiClient.put(`/projects/${id}`, data),\n    delete: id => apiClient.delete(`/projects/${id}`)\n  },\n  // Dependency analysis endpoints\n  dependencyAnalysis: {\n    getAll: () => apiClient.get('/analyses'),\n    getById: id => apiClient.get(`/analyses/${id}`),\n    getByProject: projectId => apiClient.get(`/analyses/project/${projectId}`),\n    getLatestByProject: projectId => apiClient.get(`/analyses/project/${projectId}/latest`),\n    create: (projectId, data) => apiClient.post(`/analyses/project/${projectId}`, data),\n    getVulnerabilityStatus: id => apiClient.get(`/analyses/${id}/vulnerability-status`),\n    uploadPom: (projectId, file) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      return apiClient.post(`/projects/${projectId}/pom-upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    }\n  },\n  // Chart endpoints\n  charts: {\n    getDependencyUpdates: analysisId => apiClient.get(`/charts/dependency-updates/${analysisId}`),\n    getVulnerabilities: analysisId => apiClient.get(`/charts/vulnerabilities/${analysisId}`),\n    getLicenseDistribution: analysisId => apiClient.get(`/charts/license-distribution/${analysisId}`)\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","REACT_APP_API_BASE_URL","console","log","apiClient","create","baseURL","headers","interceptors","request","use","config","error","Promise","reject","response","data","status","message","api","projects","getAll","get","getById","id","post","update","put","delete","dependencyAnalysis","getByProject","projectId","getLatestByProject","getVulnerabilityStatus","uploadPom","file","formData","FormData","append","charts","getDependencyUpdates","analysisId","getVulnerabilities","getLicenseDistribution"],"sources":["/Users/yeldan/IdeaProjects/MavenAnalyzer/MavenAnalyzerUI/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Define API base URL with full URL path\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \n  ? (process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api')\n  : 'http://localhost:8080/api'; // Always use absolute URL in development\n\nconsole.log('API Base URL:', API_BASE_URL); // Debug logging\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor for auth tokens, etc.\napiClient.interceptors.request.use(\n  (config) => {\n    // You can add auth tokens here when you implement authentication\n    // const token = localStorage.getItem('token');\n    // if (token) {\n    //   config.headers.Authorization = `Bearer ${token}`;\n    // }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle common errors\n    if (error.response) {\n      // Server responded with error status\n      console.error('API Error:', error.response.data);\n      \n      // Handle specific status codes\n      switch (error.response.status) {\n        case 401:\n          // Handle unauthorized\n          console.log('Unauthorized access');\n          // Redirect to login or refresh token\n          break;\n        case 404:\n          console.log('Resource not found');\n          break;\n        default:\n          break;\n      }\n    } else if (error.request) {\n      // Request made but no response\n      console.error('No response received:', error.request);\n    } else {\n      // Error in request setup\n      console.error('Request error:', error.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// API Methods\nconst api = {\n  // Project endpoints\n  projects: {\n    getAll: () => apiClient.get('/projects'),\n    getById: (id) => apiClient.get(`/projects/${id}`),\n    create: (data) => apiClient.post('/projects', data),\n    update: (id, data) => apiClient.put(`/projects/${id}`, data),\n    delete: (id) => apiClient.delete(`/projects/${id}`),\n  },\n  \n  // Dependency analysis endpoints\n  dependencyAnalysis: {\n    getAll: () => apiClient.get('/analyses'),\n    getById: (id) => apiClient.get(`/analyses/${id}`),\n    getByProject: (projectId) => apiClient.get(`/analyses/project/${projectId}`),\n    getLatestByProject: (projectId) => apiClient.get(`/analyses/project/${projectId}/latest`),\n    create: (projectId, data) => apiClient.post(`/analyses/project/${projectId}`, data),\n    getVulnerabilityStatus: (id) => apiClient.get(`/analyses/${id}/vulnerability-status`),\n    uploadPom: (projectId, file) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      return apiClient.post(`/projects/${projectId}/pom-upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n    },\n  },\n  \n  // Chart endpoints\n  charts: {\n    getDependencyUpdates: (analysisId) => apiClient.get(`/charts/dependency-updates/${analysisId}`),\n    getVulnerabilities: (analysisId) => apiClient.get(`/charts/vulnerabilities/${analysisId}`),\n    getLicenseDistribution: (analysisId) => apiClient.get(`/charts/license-distribution/${analysisId}`),\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}