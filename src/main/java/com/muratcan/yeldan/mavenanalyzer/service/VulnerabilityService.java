package com.muratcan.yeldan.mavenanalyzer.service;

import com.muratcan.yeldan.mavenanalyzer.dto.VulnerabilityResponse;
import com.muratcan.yeldan.mavenanalyzer.entity.DependencyAnalysis;

import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * Service for checking vulnerabilities in dependencies
 */
public interface VulnerabilityService {

    /**
     * Check for vulnerabilities in a specific Maven dependency
     *
     * @param groupId    The Maven group ID
     * @param artifactId The Maven artifact ID
     * @param version    The version of the dependency
     * @return List of vulnerabilities found
     */
    List<VulnerabilityResponse> checkVulnerabilities(String groupId, String artifactId, String version);

    /**
     * Asynchronously check for vulnerabilities in a specific Maven dependency
     *
     * @param groupId    The Maven group ID
     * @param artifactId The Maven artifact ID
     * @param version    The version of the dependency
     * @param analysisId The ID of the analysis this check is part of
     * @return A CompletableFuture that will be completed with the list of vulnerabilities found
     */
    CompletableFuture<List<VulnerabilityResponse>> checkVulnerabilitiesAsync(
            String groupId, String artifactId, String version, Long analysisId);

    /**
     * Check if a dependency has any vulnerabilities
     *
     * @param groupId    The Maven group ID
     * @param artifactId The Maven artifact ID
     * @param version    The version of the dependency
     * @return true if vulnerabilities were found, false otherwise
     */
    boolean hasVulnerabilities(String groupId, String artifactId, String version);

    /**
     * Get the count of vulnerabilities for a dependency
     *
     * @param groupId    The Maven group ID
     * @param artifactId The Maven artifact ID
     * @param version    The version of the dependency
     * @return The number of vulnerabilities found
     */
    int getVulnerabilityCount(String groupId, String artifactId, String version);

    /**
     * Manually clear the cache for a specific dependency
     *
     * @param groupId    The Maven group ID
     * @param artifactId The Maven artifact ID
     * @param version    The version of the dependency
     */
    void clearVulnerabilityCache(String groupId, String artifactId, String version);

    /**
     * Manually clear all vulnerability caches
     */
    void clearAllVulnerabilityCaches();

    /**
     * Process all dependencies for an analysis in batches and check for vulnerabilities
     * This is more efficient than checking each dependency individually
     *
     * @param analysisId The ID of the analysis to process
     */
    void processDependenciesInBatches(Long analysisId);

    void checkAndUpdateAnalysisStatus(Long analysisId);

    DependencyAnalysis getAnalysisWithFreshTransaction(Long analysisId);

    void updateDependencyVulnerabilities(String groupId, String artifactId, String version, Long analysisId, List<VulnerabilityResponse> vulnerabilities);
} 