import React, { useMemo } from 'react';
import { ResponsiveBar } from '@nivo/bar';
import { Box, Typography, CircularProgress } from '@mui/material';

/**
 * Vulnerability Bar Chart component using Nivo
 * 
 * @param {Object} props - Component props
 * @param {Object} props.data - Either analysis data object or bar chart data from API
 * @param {boolean} props.loading - Loading state
 * @param {number} props.height - Chart height in pixels
 */
const VulnerabilityChart = ({ data, loading, height = 300 }) => {
  // Add diagnostic logging to help identify the issue
  console.log('VulnerabilityChart data:', data);
  
  // Process data to get vulnerability counts by severity - moved to top level before any returns
  const vulnerabilityData = useMemo(() => {
    // Check if we have the new API data format
    if (data?.data && Array.isArray(data.data)) {
      // We have data from the chart data API
      console.log('Using API data format:', data.data);
      return data.data;
    }
    
    // Fallback to the old format (analysis object with dependencies)
    // If no data or dependencies, return empty array
    if (!data || !data.dependencies) {
      console.log('No valid data found');
      return [];
    }

    // Initialize counters for each severity level
    const counts = {
      Critical: 0,
      High: 0,
      Medium: 0,
      Low: 0,
      Unknown: 0,
      None: 0
    };

    // Count vulnerabilities by severity
    data.dependencies.forEach(dependency => {
      if (dependency.vulnerabilities) {
        dependency.vulnerabilities.forEach(vuln => {
          console.log('Processing vulnerability:', vuln);
          
          // Normalize severity to handle case differences (CRITICAL vs Critical)
          let severity = vuln.severity || 'Unknown';
          console.log('Original severity:', vuln.severity, 'Normalized to:', severity);
          
          // Normalize case for consistency
          if (severity.toUpperCase() === 'CRITICAL') severity = 'Critical';
          else if (severity.toUpperCase() === 'HIGH') severity = 'High';
          else if (severity.toUpperCase() === 'MEDIUM') severity = 'Medium';
          else if (severity.toUpperCase() === 'LOW') severity = 'Low';
          else if (severity.toUpperCase() === 'UNKNOWN' || !severity) severity = 'Unknown';
          else if (severity === undefined || severity === null) severity = 'Unknown';
          
          counts[severity] = (counts[severity] || 0) + 1;
        });
      }
    });

    console.log('Final vulnerability counts:', counts);

    // Convert to the format expected by the bar chart
    return Object.keys(counts)
      .filter(key => counts[key] > 0 && key !== 'None') // Only include non-zero values and exclude 'None'
      .map(key => ({
        severity: key,
        category: key,  // Added for compatibility with the new API format
        count: counts[key],
        color: getColorForSeverity(key)
      }));
  }, [data]);

  console.log('Processed vulnerability data:', vulnerabilityData);

  // Calculate a clean summary text without any "undefined" in it
  const cleanSummary = useMemo(() => {
    if (!vulnerabilityData || vulnerabilityData.length === 0) return null;
    
    const severityCounts = vulnerabilityData
      .filter(item => item && item.severity && item.severity !== 'None' && item.severity !== 'Unknown')
      .map(item => `${item.count} ${item.severity?.toLowerCase() || 'unknown'}`)
      .join(', ');
      
    const unknownCount = vulnerabilityData.find(item => item && (!item.severity || item.severity === 'Unknown'))?.count || 
                         vulnerabilityData.filter(item => item && (!item.severity || item.severity === 'Unknown'))
                                          .reduce((sum, item) => sum + (item.count || 0), 0);
    
    if (severityCounts && unknownCount > 0) {
      return `${severityCounts}, and ${unknownCount} with unspecified severity level`;
    } else if (severityCounts) {
      return severityCounts;
    } else if (unknownCount > 0) {
      return `${unknownCount} with unspecified severity level`;
    }
    
    return "No vulnerability data available";
  }, [vulnerabilityData]);
  
  // Add the clean summary to the data object if it's going to be used elsewhere
  if (data) {
    data.cleanSummary = cleanSummary || "No vulnerability data available";
  }

  // Return loading indicator if data is loading
  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>
        <CircularProgress />
      </Box>
    );
  }

  // Return message if no data available
  if ((!data?.data && !data?.dependencies) || vulnerabilityData.length === 0) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, p: 2 }}>
        <Typography color="text.secondary">No vulnerability data available</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ height }}>
      <ResponsiveBar
        data={vulnerabilityData}
        keys={data?.keys || ['count']}
        indexBy={data?.data ? 'category' : 'severity'}
        margin={{ top: 40, right: 50, bottom: 40, left: 60 }}
        padding={0.3}
        valueScale={{ type: 'linear' }}
        indexScale={{ type: 'band', round: true }}
        colors={({ data }) => data.color}
        borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 5,
          tickPadding: 5,
          tickRotation: 0,
          legend: 'Severity',
          legendPosition: 'middle',
          legendOffset: 32
        }}
        axisLeft={{
          tickSize: 5,
          tickPadding: 5,
          tickRotation: 0,
          legend: 'Count',
          legendPosition: 'middle',
          legendOffset: -40
        }}
        labelSkipWidth={12}
        labelSkipHeight={12}
        labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}
        animate={true}
        motionStiffness={90}
        motionDamping={15}
      />
    </Box>
  );
};

// Helper function to get color based on severity
function getColorForSeverity(severity) {
  console.log('Getting color for severity:', severity);
  switch (severity) {
    case 'Critical':
      return '#d32f2f'; // dark red
    case 'High':
      return '#f44336'; // red
    case 'Medium':
      return '#ff9800'; // orange
    case 'Low':
      return '#ffeb3b'; // yellow
    case 'Unknown':
      return '#9e9e9e'; // grey for unknown
    default:
      console.log('Unrecognized severity:', severity);
      return '#9e9e9e'; // grey for any other case
  }
}

export default VulnerabilityChart; 