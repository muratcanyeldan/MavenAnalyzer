import React, { useMemo } from 'react';
import { ResponsivePie } from '@nivo/pie';
import { Box, Typography, CircularProgress } from '@mui/material';

/**
 * Vulnerability By Dependency Chart component using Nivo
 * Displays the distribution of vulnerabilities across different dependencies
 * as a pie chart to identify which dependencies contribute most to security risks
 * 
 * @param {Object} props - Component props
 * @param {Object} props.data - Either analysis data object or chart data from API
 * @param {boolean} props.loading - Loading state
 * @param {number} props.height - Chart height in pixels
 */
const VulnerabilityByDependencyChart = ({ data, loading, height = 300 }) => {
  // Process data to get vulnerability counts by dependency
  const vulnerabilityData = useMemo(() => {
    // Fallback if no data is available
    if (!data || !data.dependencies || !Array.isArray(data.dependencies)) {
      return [];
    }

    // Filter dependencies with vulnerabilities
    const vulnerableDependencies = data.dependencies.filter(
      dep => dep.vulnerableCount && dep.vulnerableCount > 0
    );

    // Sort dependencies by vulnerability count (descending)
    vulnerableDependencies.sort((a, b) => 
      (b.vulnerableCount || 0) - (a.vulnerableCount || 0)
    );

    // Take top 8 dependencies with most vulnerabilities for clarity
    // Combine the rest as "Others" if there are more than 8
    let chartData = [];
    const topDependencies = vulnerableDependencies.slice(0, 8);
    
    // Calculate total vulnerabilities
    const totalVulnerabilities = vulnerableDependencies.reduce(
      (sum, dep) => sum + (dep.vulnerableCount || 0), 0
    );
    
    // Add top dependencies to the chart data
    chartData = topDependencies.map(dep => {
      const count = dep.vulnerableCount || 0;
      const percentage = totalVulnerabilities > 0 
        ? Math.round((count / totalVulnerabilities) * 100) 
        : 0;
        
      return {
        id: `${dep.groupId}:${dep.artifactId}`,
        label: `${dep.groupId}:${dep.artifactId}`.length > 25 
          ? `${dep.groupId}:${dep.artifactId}`.substring(0, 22) + '...' 
          : `${dep.groupId}:${dep.artifactId}`,
        fullName: `${dep.groupId}:${dep.artifactId}`,
        value: count,
        percentage: percentage,
        color: generateColorFromString(`${dep.groupId}:${dep.artifactId}`)
      };
    });

    // Add "Others" category if there are more than 8 vulnerable dependencies
    if (vulnerableDependencies.length > 8) {
      const otherDependencies = vulnerableDependencies.slice(8);
      const otherCount = otherDependencies.reduce(
        (sum, dep) => sum + (dep.vulnerableCount || 0), 0
      );
      const otherPercentage = totalVulnerabilities > 0 
        ? Math.round((otherCount / totalVulnerabilities) * 100) 
        : 0;

      chartData.push({
        id: 'Others',
        label: 'Others',
        value: otherCount,
        percentage: otherPercentage,
        color: '#9e9e9e',
        tooltipDetails: otherDependencies.map(dep => 
          `${dep.groupId}:${dep.artifactId} (${dep.vulnerableCount || 0})`
        )
      });
    }

    return chartData;
  }, [data]);

  // Calculate a summary of the vulnerability distribution
  // eslint-disable-next-line no-unused-vars
  const summary = useMemo(() => {
    if (!vulnerabilityData || vulnerabilityData.length === 0) {
      return "No vulnerability data available";
    }
    
    const totalVulnerabilities = vulnerabilityData.reduce((sum, item) => sum + item.value, 0);
    
    if (vulnerabilityData.length === 1) {
      return `${totalVulnerabilities} vulnerabilities found in 1 dependency`;
    }
    
    // Get top 2 dependencies for summary
    const topDeps = vulnerabilityData
      .filter(item => item.id !== 'Others')
      .slice(0, 2);
      
    if (topDeps.length === 0) {
      return `${totalVulnerabilities} vulnerabilities distributed across dependencies`;
    }
    
    const depSummary = topDeps.map(dep => 
      `${dep.id} (${dep.value}, ${dep.percentage}%)`
    ).join(' and ');
    
    return `${totalVulnerabilities} vulnerabilities found - highest in ${depSummary}`;
  }, [vulnerabilityData]);

  // Return loading indicator if data is loading
  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>
        <CircularProgress />
      </Box>
    );
  }

  // Return message if no data available
  if (vulnerabilityData.length === 0) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, p: 2 }}>
        <Typography color="text.secondary">No vulnerability data available</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ height }}>
      <ResponsivePie
        data={vulnerabilityData}
        margin={{ top: 30, right: 80, bottom: 50, left: 80 }}
        innerRadius={0.5}
        padAngle={0.7}
        cornerRadius={3}
        activeOuterRadiusOffset={8}
        colors={({ data }) => data.color}
        borderWidth={1}
        borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}
        arcLinkLabelsSkipAngle={10}
        arcLinkLabelsTextColor="#333333"
        arcLinkLabelsThickness={2}
        arcLinkLabelsColor={{ from: 'color' }}
        arcLabelsSkipAngle={10}
        arcLabelsTextColor={{ from: 'color', modifiers: [['darker', 2]] }}
        tooltip={({ datum }) => (
          <div
            style={{
              background: 'white',
              padding: '12px',
              border: '1px solid #ccc',
              borderRadius: '4px',
              boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
              maxWidth: '300px',
            }}
          >
            {datum.id === 'Others' ? (
              <div>
                <strong style={{ color: '#333' }}>
                  Other dependencies: {datum.value} vulnerabilities ({datum.percentage}%)
                </strong>
                <div style={{ marginTop: '8px', fontSize: '0.9em' }}>
                  <ul style={{ padding: '0 0 0 16px', margin: 0 }}>
                    {datum.data.tooltipDetails.slice(0, 5).map((detail, i) => (
                      <li key={i}>{detail}</li>
                    ))}
                    {datum.data.tooltipDetails.length > 5 && 
                      <li>...and {datum.data.tooltipDetails.length - 5} more</li>
                    }
                  </ul>
                </div>
              </div>
            ) : (
              <div>
                <strong style={{ color: datum.color }}>
                  {datum.data.fullName || datum.label}
                </strong>
                <div style={{ marginTop: '5px' }}>
                  <span style={{ fontSize: '0.9em' }}>
                    {datum.value} vulnerabilities ({datum.percentage}% of total)
                  </span>
                </div>
              </div>
            )}
          </div>
        )}
        symbols={false}
        colorBy="id"
      />
    </Box>
  );
};

// Helper function to generate a consistent color based on dependency name
function generateColorFromString(str) {
  // Simple hash function
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    hash = str.charCodeAt(i) + ((hash << 5) - hash);
  }
  
  // Common security-related colors to choose from (mostly warm colors)
  const colors = [
    '#f44336', // red
    '#ff5722', // deep orange
    '#ff9800', // orange
    '#ffc107', // amber
    '#ffeb3b', // yellow
    '#cddc39', // lime
    '#8bc34a', // light green
    '#009688', // teal
    '#e91e63', // pink
    '#9c27b0', // purple
    '#673ab7', // deep purple
    '#3f51b5', // indigo
    '#2196f3', // blue
  ];
  
  // Use the hash to select a color
  const index = Math.abs(hash) % colors.length;
  return colors[index];
}

export default VulnerabilityByDependencyChart; 