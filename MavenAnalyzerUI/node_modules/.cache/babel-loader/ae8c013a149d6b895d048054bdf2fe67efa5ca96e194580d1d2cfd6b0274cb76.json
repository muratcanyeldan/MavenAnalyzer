{"ast":null,"code":"import axios from'axios';// Define API base URL with full URL path\nconst API_BASE_URL=process.env.NODE_ENV==='production'?process.env.REACT_APP_API_BASE_URL||'http://localhost:8080/api':'http://localhost:8080/api';// Always use absolute URL in development\nconsole.log('API Base URL:',API_BASE_URL);// Debug logging\n// Create axios instance with default config\nconst apiClient=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add request interceptor for auth tokens, etc.\napiClient.interceptors.request.use(config=>{// You can add auth tokens here when you implement authentication\n// const token = localStorage.getItem('token');\n// if (token) {\n//   config.headers.Authorization = `Bearer ${token}`;\n// }\nreturn config;},error=>Promise.reject(error));// Add response interceptor for error handling\napiClient.interceptors.response.use(response=>response,error=>{// Handle common errors\nif(error.response){// Server responded with error status\nconsole.error('API Error:',error.response.data);// Handle specific status codes\nswitch(error.response.status){case 401:// Handle unauthorized\nconsole.log('Unauthorized access');// Redirect to login or refresh token\nbreak;case 404:console.log('Resource not found');break;default:break;}}else if(error.request){// Request made but no response\nconsole.error('No response received:',error.request);}else{// Error in request setup\nconsole.error('Request error:',error.message);}return Promise.reject(error);});// API Methods\nconst api={// Project endpoints\nprojects:{getAll:()=>apiClient.get('/projects'),getById:id=>apiClient.get(`/projects/${id}`),create:data=>apiClient.post('/projects',data),update:(id,data)=>apiClient.put(`/projects/${id}`,data),delete:id=>apiClient.delete(`/projects/${id}`)},// Dependency analysis endpoints\ndependencyAnalysis:{getAll:()=>apiClient.get('/analyses'),getById:id=>apiClient.get(`/analyses/${id}`),getByProject:projectId=>apiClient.get(`/analyses/project/${projectId}`),getLatestByProject:projectId=>apiClient.get(`/analyses/project/${projectId}/latest`),create:(projectId,data)=>apiClient.post(`/analyses/project/${projectId}`,data),uploadPom:(projectId,file)=>{const formData=new FormData();formData.append('file',file);return apiClient.post(`/projects/${projectId}/pom-upload`,formData,{headers:{'Content-Type':'multipart/form-data'}});}},// Chart endpoints\ncharts:{getDependencyUpdates:analysisId=>apiClient.get(`/charts/dependency-updates/${analysisId}`),getVulnerabilities:analysisId=>apiClient.get(`/charts/vulnerabilities/${analysisId}`),getLicenseDistribution:analysisId=>apiClient.get(`/charts/license-distribution/${analysisId}`)}};export default api;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}