{"ast":null,"code":"var _jsxFileName = \"/Users/yeldan/IdeaProjects/MavenAnalyzer/MavenAnalyzerUI/src/components/charts/VulnerabilitySeverityChart.js\";\nimport React, { useMemo } from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\nimport { Box, Typography, CircularProgress } from '@mui/material';\n\n/**\n * Vulnerability Severity Chart component using Nivo\n * Displays the distribution of vulnerability severity levels\n * \n * @param {Object} props - Component props\n * @param {Object} props.data - Either analysis data object or bar chart data from API\n * @param {boolean} props.loading - Loading state\n * @param {number} props.height - Chart height in pixels\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VulnerabilitySeverityChart = ({\n  data,\n  loading,\n  height = 300\n}) => {\n  // Process data to get vulnerability counts by severity\n  const severityData = useMemo(() => {\n    // Check if we have the new API data format\n    if (data !== null && data !== void 0 && data.data && Array.isArray(data.data)) {\n      // We have data from the chart data API\n      return data.data;\n    }\n\n    // Fallback to the old format (analysis object with dependencies)\n    if (!data || !data.dependencies || !Array.isArray(data.dependencies)) {\n      return [];\n    }\n\n    // Initialize counters for each severity level\n    const counts = {\n      Critical: 0,\n      High: 0,\n      Medium: 0,\n      Low: 0,\n      Unknown: 0 // Added Unknown category\n    };\n\n    // Count vulnerabilities by severity\n    data.dependencies.forEach(dependency => {\n      if (dependency.vulnerabilities && Array.isArray(dependency.vulnerabilities)) {\n        dependency.vulnerabilities.forEach(vuln => {\n          // Normalize severity to handle case differences (CRITICAL vs Critical)\n          let severity = vuln.severity || 'Unknown';\n\n          // Normalize case for consistency\n          if (severity.toUpperCase() === 'CRITICAL') severity = 'Critical';else if (severity.toUpperCase() === 'HIGH') severity = 'High';else if (severity.toUpperCase() === 'MEDIUM') severity = 'Medium';else if (severity.toUpperCase() === 'LOW') severity = 'Low';else if (severity.toUpperCase() === 'UNKNOWN') severity = 'Unknown';\n          if (severity !== 'None') {\n            counts[severity] = (counts[severity] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    // Convert to the format expected by the bar chart\n    return Object.entries(counts).filter(([_, count]) => count > 0) // Only include non-zero values\n    .map(([severity, count]) => ({\n      category: severity,\n      count: count,\n      color: getColorForSeverity(severity)\n    }));\n  }, [data]);\n\n  // Return loading indicator if data is loading\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Return message if no data available\n  if (severityData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height,\n        p: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"text.secondary\",\n        children: \"No vulnerability severity data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height\n    },\n    children: /*#__PURE__*/_jsxDEV(ResponsiveBar, {\n      data: severityData,\n      keys: (data === null || data === void 0 ? void 0 : data.keys) || ['count'],\n      indexBy: \"category\",\n      margin: {\n        top: 40,\n        right: 50,\n        bottom: 40,\n        left: 60\n      },\n      padding: 0.3,\n      valueScale: {\n        type: 'linear'\n      },\n      indexScale: {\n        type: 'band',\n        round: true\n      },\n      colors: ({\n        data\n      }) => data.color,\n      borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1.6]]\n      },\n      axisTop: null,\n      axisRight: null,\n      axisBottom: {\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Severity Level',\n        legendPosition: 'middle',\n        legendOffset: 32\n      },\n      axisLeft: {\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Count',\n        legendPosition: 'middle',\n        legendOffset: -40\n      },\n      enableGridY: true,\n      labelSkipWidth: 12,\n      labelSkipHeight: 12,\n      labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1.6]]\n      },\n      animate: true,\n      motionStiffness: 90,\n      motionDamping: 15,\n      legends: [{\n        dataFrom: 'keys',\n        anchor: 'bottom-right',\n        direction: 'column',\n        justify: false,\n        translateX: 120,\n        translateY: 0,\n        itemsSpacing: 2,\n        itemWidth: 100,\n        itemHeight: 20,\n        itemDirection: 'left-to-right',\n        itemOpacity: 0.85,\n        symbolSize: 20,\n        effects: [{\n          on: 'hover',\n          style: {\n            itemOpacity: 1\n          }\n        }]\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get color based on severity\nfunction getColorForSeverity(severity) {\n  switch (severity) {\n    case 'Critical':\n      return '#d32f2f';\n    // dark red\n    case 'High':\n      return '#f44336';\n    // red\n    case 'Medium':\n      return '#ff9800';\n    // orange\n    case 'Low':\n      return '#ffeb3b';\n    // yellow\n    case 'Unknown':\n      return '#9e9e9e';\n    // grey for unknown\n    default:\n      return '#9e9e9e';\n    // grey for any other case\n  }\n}\nexport default VulnerabilitySeverityChart;","map":{"version":3,"names":["React","useMemo","ResponsiveBar","Box","Typography","CircularProgress","jsxDEV","_jsxDEV","VulnerabilitySeverityChart","data","loading","height","severityData","Array","isArray","dependencies","counts","Critical","High","Medium","Low","Unknown","forEach","dependency","vulnerabilities","vuln","severity","toUpperCase","Object","entries","filter","_","count","map","category","color","getColorForSeverity","sx","display","justifyContent","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","length","p","keys","indexBy","margin","top","right","bottom","left","padding","valueScale","type","indexScale","round","colors","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","enableGridY","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style"],"sources":["/Users/yeldan/IdeaProjects/MavenAnalyzer/MavenAnalyzerUI/src/components/charts/VulnerabilitySeverityChart.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\nimport { Box, Typography, CircularProgress } from '@mui/material';\n\n/**\n * Vulnerability Severity Chart component using Nivo\n * Displays the distribution of vulnerability severity levels\n * \n * @param {Object} props - Component props\n * @param {Object} props.data - Either analysis data object or bar chart data from API\n * @param {boolean} props.loading - Loading state\n * @param {number} props.height - Chart height in pixels\n */\nconst VulnerabilitySeverityChart = ({ data, loading, height = 300 }) => {\n  // Process data to get vulnerability counts by severity\n  const severityData = useMemo(() => {\n    // Check if we have the new API data format\n    if (data?.data && Array.isArray(data.data)) {\n      // We have data from the chart data API\n      return data.data;\n    }\n    \n    // Fallback to the old format (analysis object with dependencies)\n    if (!data || !data.dependencies || !Array.isArray(data.dependencies)) {\n      return [];\n    }\n\n    // Initialize counters for each severity level\n    const counts = {\n      Critical: 0,\n      High: 0,\n      Medium: 0,\n      Low: 0,\n      Unknown: 0 // Added Unknown category\n    };\n\n    // Count vulnerabilities by severity\n    data.dependencies.forEach(dependency => {\n      if (dependency.vulnerabilities && Array.isArray(dependency.vulnerabilities)) {\n        dependency.vulnerabilities.forEach(vuln => {\n          // Normalize severity to handle case differences (CRITICAL vs Critical)\n          let severity = vuln.severity || 'Unknown';\n          \n          // Normalize case for consistency\n          if (severity.toUpperCase() === 'CRITICAL') severity = 'Critical';\n          else if (severity.toUpperCase() === 'HIGH') severity = 'High';\n          else if (severity.toUpperCase() === 'MEDIUM') severity = 'Medium';\n          else if (severity.toUpperCase() === 'LOW') severity = 'Low';\n          else if (severity.toUpperCase() === 'UNKNOWN') severity = 'Unknown';\n          \n          if (severity !== 'None') {\n            counts[severity] = (counts[severity] || 0) + 1;\n          }\n        });\n      }\n    });\n\n    // Convert to the format expected by the bar chart\n    return Object.entries(counts)\n      .filter(([_, count]) => count > 0) // Only include non-zero values\n      .map(([severity, count]) => ({\n        category: severity,\n        count: count,\n        color: getColorForSeverity(severity)\n      }));\n  }, [data]);\n\n  // Return loading indicator if data is loading\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Return message if no data available\n  if (severityData.length === 0) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height, p: 2 }}>\n        <Typography color=\"text.secondary\">No vulnerability severity data available</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ height }}>\n      <ResponsiveBar\n        data={severityData}\n        keys={data?.keys || ['count']}\n        indexBy=\"category\"\n        margin={{ top: 40, right: 50, bottom: 40, left: 60 }}\n        padding={0.3}\n        valueScale={{ type: 'linear' }}\n        indexScale={{ type: 'band', round: true }}\n        colors={({ data }) => data.color}\n        borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'Severity Level',\n          legendPosition: 'middle',\n          legendOffset: 32\n        }}\n        axisLeft={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'Count',\n          legendPosition: 'middle',\n          legendOffset: -40\n        }}\n        enableGridY={true}\n        labelSkipWidth={12}\n        labelSkipHeight={12}\n        labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        legends={[\n          {\n            dataFrom: 'keys',\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 120,\n            translateY: 0,\n            itemsSpacing: 2,\n            itemWidth: 100,\n            itemHeight: 20,\n            itemDirection: 'left-to-right',\n            itemOpacity: 0.85,\n            symbolSize: 20,\n            effects: [\n              {\n                on: 'hover',\n                style: {\n                  itemOpacity: 1\n                }\n              }\n            ]\n          }\n        ]}\n      />\n    </Box>\n  );\n};\n\n// Helper function to get color based on severity\nfunction getColorForSeverity(severity) {\n  switch (severity) {\n    case 'Critical':\n      return '#d32f2f'; // dark red\n    case 'High':\n      return '#f44336'; // red\n    case 'Medium':\n      return '#ff9800'; // orange\n    case 'Low':\n      return '#ffeb3b'; // yellow\n    case 'Unknown':\n      return '#9e9e9e'; // grey for unknown\n    default:\n      return '#9e9e9e'; // grey for any other case\n  }\n}\n\nexport default VulnerabilitySeverityChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}