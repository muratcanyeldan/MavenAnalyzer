{"ast":null,"code":"import React,{useMemo}from'react';import{ResponsivePie}from'@nivo/pie';import{Box,Typography,CircularProgress}from'@mui/material';/**\n * License Distribution Pie Chart component using Nivo\n * \n * @param {Object} props - Component props\n * @param {Object} props.data - Either analysis data object or pie chart data from API\n * @param {boolean} props.loading - Loading state\n * @param {number} props.height - Chart height in pixels\n */import{jsx as _jsx}from\"react/jsx-runtime\";const LicenseDistributionChart=_ref=>{let{data,loading,height=300}=_ref;// Prepare data for the pie chart - moved to top level for Hook rule compliance\nconst chartData=useMemo(()=>{// Check if we have the new API data format (array of entries)\nif(data!==null&&data!==void 0&&data.data&&Array.isArray(data.data)){// We have data from the chart data API\nreturn data.data;}// Fallback to the old format (analysis object with dependencies)\nif(!data||!data.dependencies||!Array.isArray(data.dependencies)){return[];}// Count licenses\nconst licenseCounts={};data.dependencies.forEach(dependency=>{const license=dependency.license||'Unknown';licenseCounts[license]=(licenseCounts[license]||0)+1;});// Convert to chart format\nreturn Object.entries(licenseCounts).filter(_ref2=>{let[_,count]=_ref2;return count>0;})// Only include non-zero values\n.map(_ref3=>{let[license,count]=_ref3;// Generate a consistent color based on the license name (simple hash)\nconst hash=license.split('').reduce((acc,char)=>{return char.charCodeAt(0)+((acc<<5)-acc);},0);const color=`hsl(${Math.abs(hash)%360}, 70%, 50%)`;return{id:license,label:license,value:count,color:color};});},[data]);// Return loading indicator if data is loading\nif(loading){return/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',alignItems:'center',height},children:/*#__PURE__*/_jsx(CircularProgress,{})});}// Return message if no data available\nif(chartData.length===0){return/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',alignItems:'center',height,p:2},children:/*#__PURE__*/_jsx(Typography,{color:\"text.secondary\",children:\"No license data available\"})});}return/*#__PURE__*/_jsx(Box,{sx:{height},children:/*#__PURE__*/_jsx(ResponsivePie,{data:chartData,margin:{top:40,right:80,bottom:40,left:80},innerRadius:0.5,padAngle:0.7,cornerRadius:3,activeOuterRadiusOffset:8,borderWidth:1,borderColor:{from:'color',modifiers:[['darker',0.2]]},arcLinkLabelsSkipAngle:10,arcLinkLabelsTextColor:\"#333333\",arcLinkLabelsThickness:2,arcLinkLabelsColor:{from:'color'},arcLabelsSkipAngle:10,arcLabelsTextColor:{from:'color',modifiers:[['darker',2]]},colors:{datum:'data.color'},legends:[{anchor:'right',direction:'column',justify:false,translateX:30,translateY:0,itemsSpacing:0,itemWidth:100,itemHeight:20,itemTextColor:'#999',itemDirection:'left-to-right',itemOpacity:1,symbolSize:18,symbolShape:'circle'}]})});};export default LicenseDistributionChart;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}