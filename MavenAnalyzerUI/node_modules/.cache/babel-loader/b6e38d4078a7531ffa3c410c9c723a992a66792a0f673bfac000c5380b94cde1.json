{"ast":null,"code":"// Utility functions for date formatting\n\n/**\n * Formats a date string into a more readable format\n * @param {string} dateString - The date string to format (ISO format)\n * @param {boolean} includeTime - Whether to include time in the formatted date\n * @returns {string} The formatted date string\n */\nexport const formatDate = (dateString, includeTime = false) => {\n  if (!dateString) {\n    return 'N/A';\n  }\n  try {\n    const date = new Date(dateString);\n    if (isNaN(date)) {\n      return dateString;\n    }\n    const options = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      ...(includeTime && {\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    };\n    return date.toLocaleDateString(undefined, options);\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString;\n  }\n};\n\n/**\n * Calculates the relative time (e.g., \"2 days ago\", \"just now\")\n * @param {string} dateString - The date string to format (ISO format)\n * @returns {string} The relative time string\n */\nexport const getRelativeTime = dateString => {\n  if (!dateString) {\n    return 'N/A';\n  }\n  try {\n    const date = new Date(dateString);\n    if (isNaN(date)) {\n      return dateString;\n    }\n    const now = new Date();\n    const diff = now - date;\n\n    // Less than a minute\n    if (diff < 60 * 1000) {\n      return 'just now';\n    }\n\n    // Less than an hour\n    if (diff < 60 * 60 * 1000) {\n      const minutes = Math.floor(diff / (60 * 1000));\n      return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;\n    }\n\n    // Less than a day\n    if (diff < 24 * 60 * 60 * 1000) {\n      const hours = Math.floor(diff / (60 * 60 * 1000));\n      return `${hours} hour${hours !== 1 ? 's' : ''} ago`;\n    }\n\n    // Less than a week\n    if (diff < 7 * 24 * 60 * 60 * 1000) {\n      const days = Math.floor(diff / (24 * 60 * 60 * 1000));\n      return `${days} day${days !== 1 ? 's' : ''} ago`;\n    }\n\n    // Otherwise, return formatted date\n    return formatDate(dateString);\n  } catch (error) {\n    console.error('Error calculating relative time:', error);\n    return dateString;\n  }\n};","map":{"version":3,"names":["formatDate","dateString","includeTime","date","Date","isNaN","options","year","month","day","hour","minute","toLocaleDateString","undefined","error","console","getRelativeTime","now","diff","minutes","Math","floor","hours","days"],"sources":["/Users/yeldan/IdeaProjects/MavenAnalyzer/MavenAnalyzerUI/src/utils/dateUtils.js"],"sourcesContent":["// Utility functions for date formatting\n\n/**\n * Formats a date string into a more readable format\n * @param {string} dateString - The date string to format (ISO format)\n * @param {boolean} includeTime - Whether to include time in the formatted date\n * @returns {string} The formatted date string\n */\nexport const formatDate = (dateString, includeTime = false) => {\n  if (!dateString) {\n    return 'N/A';\n  }\n  \n  try {\n    const date = new Date(dateString);\n    if (isNaN(date)) {\n      return dateString;\n    }\n    \n    const options = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      ...(includeTime && { hour: '2-digit', minute: '2-digit' })\n    };\n    \n    return date.toLocaleDateString(undefined, options);\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString;\n  }\n};\n\n/**\n * Calculates the relative time (e.g., \"2 days ago\", \"just now\")\n * @param {string} dateString - The date string to format (ISO format)\n * @returns {string} The relative time string\n */\nexport const getRelativeTime = (dateString) => {\n  if (!dateString) {\n    return 'N/A';\n  }\n  \n  try {\n    const date = new Date(dateString);\n    if (isNaN(date)) {\n      return dateString;\n    }\n    \n    const now = new Date();\n    const diff = now - date;\n    \n    // Less than a minute\n    if (diff < 60 * 1000) {\n      return 'just now';\n    }\n    \n    // Less than an hour\n    if (diff < 60 * 60 * 1000) {\n      const minutes = Math.floor(diff / (60 * 1000));\n      return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;\n    }\n    \n    // Less than a day\n    if (diff < 24 * 60 * 60 * 1000) {\n      const hours = Math.floor(diff / (60 * 60 * 1000));\n      return `${hours} hour${hours !== 1 ? 's' : ''} ago`;\n    }\n    \n    // Less than a week\n    if (diff < 7 * 24 * 60 * 60 * 1000) {\n      const days = Math.floor(diff / (24 * 60 * 60 * 1000));\n      return `${days} day${days !== 1 ? 's' : ''} ago`;\n    }\n    \n    // Otherwise, return formatted date\n    return formatDate(dateString);\n  } catch (error) {\n    console.error('Error calculating relative time:', error);\n    return dateString;\n  }\n}; "],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAGA,CAACC,UAAU,EAAEC,WAAW,GAAG,KAAK,KAAK;EAC7D,IAAI,CAACD,UAAU,EAAE;IACf,OAAO,KAAK;EACd;EAEA,IAAI;IACF,MAAME,IAAI,GAAG,IAAIC,IAAI,CAACH,UAAU,CAAC;IACjC,IAAII,KAAK,CAACF,IAAI,CAAC,EAAE;MACf,OAAOF,UAAU;IACnB;IAEA,MAAMK,OAAO,GAAG;MACdC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,OAAO;MACdC,GAAG,EAAE,SAAS;MACd,IAAIP,WAAW,IAAI;QAAEQ,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC;IAC3D,CAAC;IAED,OAAOR,IAAI,CAACS,kBAAkB,CAACC,SAAS,EAAEP,OAAO,CAAC;EACpD,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAOb,UAAU;EACnB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,eAAe,GAAIf,UAAU,IAAK;EAC7C,IAAI,CAACA,UAAU,EAAE;IACf,OAAO,KAAK;EACd;EAEA,IAAI;IACF,MAAME,IAAI,GAAG,IAAIC,IAAI,CAACH,UAAU,CAAC;IACjC,IAAII,KAAK,CAACF,IAAI,CAAC,EAAE;MACf,OAAOF,UAAU;IACnB;IAEA,MAAMgB,GAAG,GAAG,IAAIb,IAAI,CAAC,CAAC;IACtB,MAAMc,IAAI,GAAGD,GAAG,GAAGd,IAAI;;IAEvB;IACA,IAAIe,IAAI,GAAG,EAAE,GAAG,IAAI,EAAE;MACpB,OAAO,UAAU;IACnB;;IAEA;IACA,IAAIA,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;MACzB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;MAC9C,OAAO,GAAGC,OAAO,UAAUA,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;IAC3D;;IAEA;IACA,IAAID,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;MAC9B,MAAMI,KAAK,GAAGF,IAAI,CAACC,KAAK,CAACH,IAAI,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;MACjD,OAAO,GAAGI,KAAK,QAAQA,KAAK,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;IACrD;;IAEA;IACA,IAAIJ,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;MAClC,MAAMK,IAAI,GAAGH,IAAI,CAACC,KAAK,CAACH,IAAI,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;MACrD,OAAO,GAAGK,IAAI,OAAOA,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;IAClD;;IAEA;IACA,OAAOvB,UAAU,CAACC,UAAU,CAAC;EAC/B,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAOb,UAAU;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}