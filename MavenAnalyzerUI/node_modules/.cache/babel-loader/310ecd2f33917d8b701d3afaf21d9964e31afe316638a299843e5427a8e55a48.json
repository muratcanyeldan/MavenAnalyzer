{"ast":null,"code":"var _jsxFileName = \"/Users/yeldan/IdeaProjects/MavenAnalyzer/MavenAnalyzerUI/src/pages/AnalysisDetail.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport { Typography, Paper, Box, Grid, Tabs, Tab, Card, CardContent, Divider, CircularProgress, Button, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Chip, Tooltip, TextField, InputAdornment, Snackbar, Alert, List, ListItem, ListItemText, ListItemIcon, Switch, FormControlLabel } from '@mui/material';\nimport { ArrowBack as ArrowBackIcon, Download as DownloadIcon, Share as ShareIcon, Search as SearchIcon, Warning as WarningIcon, CheckCircle as CheckCircleIcon, Info as InfoIcon, Lock as LockIcon, MoreVert as MoreVertIcon, Timeline as TimelineIcon, ContentCopy as ContentCopyIcon, FileDownload as FileDownloadIcon, Insights as InsightsIcon, SaveAlt as SaveAltIcon, Refresh as RefreshIcon } from '@mui/icons-material';\nimport api from '../services/api';\nimport { DependencyStatusChart, VulnerabilityChart, VulnerabilitySeverityChart, LicenseDistributionChart, VulnerabilityPieChart, VulnerabilityByDependencyChart } from '../components/charts';\nimport { formatDate } from '../utils/dateUtils';\nimport BomManagedVersion from '../components/BomManagedVersion';\n\n// Sample chart component (kept for backward compatibility with other tabs)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SampleChart = ({\n  title,\n  type\n}) => {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 250,\n      bgcolor: 'rgba(33, 150, 243, 0.1)',\n      borderRadius: 1,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexDirection: 'column',\n      p: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      gutterBottom: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"text.secondary\",\n      children: [type, \" Chart\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n// Tab panel component for tab content\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `analysis-tabpanel-${index}`,\n    \"aria-labelledby\": `analysis-tab-${index}`,\n    ...other,\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\nconst AnalysisDetail = () => {\n  const params = useParams();\n  const analysisId = params.id;\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [vulnerabilitiesLoading, setVulnerabilitiesLoading] = useState(true);\n  const [analysis, setAnalysis] = useState(null);\n  const [tabValue, setTabValue] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [dependencies, setDependencies] = useState([]);\n  const [error, setError] = useState(null);\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n  const [charts, setCharts] = useState({\n    dependencyUpdates: null,\n    vulnerabilities: null,\n    licenses: null\n  });\n  const [chartsLoading, setChartsLoading] = useState(false);\n  const [reportGenerating, setReportGenerating] = useState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [updatingDependency, setUpdatingDependency] = useState(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [pdfDownloadUrl, setPdfDownloadUrl] = useState(null);\n  const [restrictedLicenses, setRestrictedLicenses] = useState(['GPL', 'AGPL', 'LGPL', 'UNKNOWN']);\n\n  // Poll for vulnerability updates\n  const pollForVulnerabilityUpdates = async () => {\n    try {\n      console.log(`Starting vulnerability polling for analysis ID: ${analysisId}`);\n\n      // Set an interval to check for vulnerability updates\n      const intervalId = setInterval(async () => {\n        try {\n          var _response$data$depend, _response$data$depend2, _response$data$depend3;\n          // Use the specific vulnerability status endpoint for more efficient polling\n          console.log(`Polling vulnerability status for analysis ID: ${analysisId}`);\n          const response = await api.dependencyAnalysis.getVulnerabilityStatus(analysisId);\n          console.log(`Received vulnerability status for analysis ID: ${analysisId}`, {\n            status: response.data.vulnerabilityCheckStatus,\n            dependencies: ((_response$data$depend = response.data.dependencies) === null || _response$data$depend === void 0 ? void 0 : _response$data$depend.length) || 0\n          });\n\n          // Calculate the progress percentage for the UI\n          const totalDeps = ((_response$data$depend2 = response.data.dependencies) === null || _response$data$depend2 === void 0 ? void 0 : _response$data$depend2.length) || 0;\n          const processedDeps = ((_response$data$depend3 = response.data.dependencies) === null || _response$data$depend3 === void 0 ? void 0 : _response$data$depend3.filter(d => d.vulnerableCount !== null).length) || 0;\n          const progressPercent = totalDeps > 0 ? Math.round(processedDeps / totalDeps * 100) : 0;\n\n          // Update the analysis with the latest data\n          const totalVulnerabilities = response.data.dependencies ? response.data.dependencies.reduce((total, dep) => total + (dep.vulnerableCount || 0), 0) : 0;\n          setAnalysis({\n            ...response.data,\n            vulnerableCount: totalVulnerabilities,\n            scanProgress: progressPercent,\n            processedDependencies: processedDeps,\n            totalDependencies: totalDeps,\n            status: response.data.vulnerabilityCheckStatus === 'IN_PROGRESS' ? 'in_progress' : response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'completed' : response.data.vulnerabilityCheckStatus === 'FAILED' ? 'failed' : response.data.status || 'completed'\n          });\n          if (response.data.dependencies) {\n            setDependencies(response.data.dependencies);\n          }\n\n          // If vulnerability checking is complete, stop polling\n          if (response.data.vulnerabilityCheckStatus !== 'IN_PROGRESS') {\n            console.log(`Vulnerability check completed for analysis ID: ${analysisId}. Status: ${response.data.vulnerabilityCheckStatus}`);\n            clearInterval(intervalId);\n            setVulnerabilitiesLoading(false);\n\n            // Show notification when status changes to completed\n            setSnackbar({\n              open: true,\n              message: `Analysis status updated: ${response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'Completed' : response.data.vulnerabilityCheckStatus}`,\n              severity: response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'success' : 'info'\n            });\n\n            // Force a refresh of the data to ensure we have the final state\n            setTimeout(async () => {\n              try {\n                const finalResponse = await api.dependencyAnalysis.getById(analysisId);\n\n                // Update one last time with complete data\n                const finalVulnerabilities = finalResponse.data.dependencies ? finalResponse.data.dependencies.reduce((total, dep) => total + (dep.vulnerableCount || 0), 0) : 0;\n                setAnalysis({\n                  ...finalResponse.data,\n                  vulnerableCount: finalVulnerabilities,\n                  status: finalResponse.data.vulnerabilityCheckStatus === 'IN_PROGRESS' ? 'in_progress' : finalResponse.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'completed' : finalResponse.data.vulnerabilityCheckStatus === 'FAILED' ? 'failed' : finalResponse.data.status || 'completed'\n                });\n                if (finalResponse.data.dependencies) {\n                  setDependencies(finalResponse.data.dependencies);\n                }\n\n                // Refresh the chart data after vulnerability scan completes\n                fetchCharts();\n                console.log(`Final refresh completed for analysis ID: ${analysisId}`);\n\n                // Success notification\n                setSnackbar({\n                  open: true,\n                  message: 'Vulnerability scanning completed',\n                  severity: 'success'\n                });\n              } catch (refreshError) {\n                console.error('Error refreshing final data:', refreshError);\n                setSnackbar({\n                  open: true,\n                  message: 'Error loading final vulnerability data. You can try refreshing manually.',\n                  severity: 'warning'\n                });\n              }\n            }, 1000);\n          }\n        } catch (pollingError) {\n          console.error('Error during polling interval:', pollingError);\n\n          // Show a warning but don't stop polling yet\n          setSnackbar({\n            open: true,\n            message: 'Error checking vulnerability status. Retrying...',\n            severity: 'warning'\n          });\n        }\n      }, 3000); // Check every 3 seconds\n\n      // Clean up the interval when the component unmounts\n      return () => {\n        console.log(`Cleaning up polling interval for analysis ID: ${analysisId}`);\n        clearInterval(intervalId);\n      };\n    } catch (error) {\n      console.error('Error setting up vulnerability polling:', error);\n      setVulnerabilitiesLoading(false);\n      setSnackbar({\n        open: true,\n        message: 'Could not set up vulnerability status monitoring. Try refreshing the page.',\n        severity: 'error'\n      });\n    }\n  };\n  useEffect(() => {\n    // Log the ID to verify it's available\n    console.log(\"Current analysis ID from params:\", analysisId);\n\n    // Don't proceed if analysisId is undefined or null\n    if (!analysisId) {\n      console.error(\"Analysis ID is missing from URL parameters\");\n      setError(\"Missing analysis ID. Please select a valid analysis.\");\n      setLoading(false);\n      return;\n    }\n\n    // Fetch analysis data\n    const fetchAnalysisData = async () => {\n      setLoading(true);\n      try {\n        // Get analysis details\n        console.log(`Fetching analysis data for ID: ${analysisId}`);\n        const response = await api.dependencyAnalysis.getById(analysisId);\n        console.log('Analysis API response:', response.data);\n\n        // Additional debugging for dependencies\n        const dependencies = response.data.dependencies || [];\n        console.log(`Received ${dependencies.length} dependencies from API`);\n\n        // Log license information for all dependencies\n        dependencies.forEach(dep => {\n          console.log(`Dependency ${dep.groupId}:${dep.artifactId} - License: ${dep.license || 'NONE'}`);\n        });\n\n        // Log license issues count\n        console.log('License issues count:', response.data.licenseIssues);\n\n        // Calculate total vulnerabilities for the header stats\n        const totalVulnerabilities = dependencies.reduce((total, dep) => total + (dep.vulnerableCount || 0), 0);\n\n        // Combine the analysis data with calculated values\n        setAnalysis({\n          ...response.data,\n          vulnerableCount: totalVulnerabilities,\n          // Map the vulnerabilityCheckStatus to a UI-friendly status\n          status: response.data.vulnerabilityCheckStatus === 'IN_PROGRESS' ? 'in_progress' : response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'completed' : response.data.vulnerabilityCheckStatus === 'FAILED' ? 'failed' : response.data.status || 'completed'\n        });\n\n        // If the analysis contains dependencies, set them\n        if (dependencies.length > 0) {\n          setDependencies(dependencies);\n          console.log(`Loaded ${dependencies.length} dependencies`);\n        } else {\n          console.log(\"No dependencies found in the response data\");\n        }\n\n        // If vulnerability checking is still in progress, start a polling mechanism\n        if (response.data.vulnerabilityCheckStatus === 'IN_PROGRESS') {\n          pollForVulnerabilityUpdates();\n        } else {\n          setVulnerabilitiesLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching analysis:', error);\n        setError(`Failed to load analysis data: ${error.message || 'Unknown error'}`);\n        setSnackbar({\n          open: true,\n          message: `Error loading analysis: ${error.message || 'Unknown error'}`,\n          severity: 'error'\n        });\n\n        // Set mock data for development/fallback\n        const mockAnalysis = {\n          id: parseInt(analysisId),\n          projectId: 1,\n          projectName: 'Error Loading Project',\n          date: new Date().toISOString().split('T')[0],\n          status: 'error',\n          totalDependencies: 0,\n          outdatedDependencies: 0,\n          vulnerabilities: 0,\n          licenseIssues: 0\n        };\n        setAnalysis(mockAnalysis);\n        setDependencies([]);\n        setVulnerabilitiesLoading(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAnalysisData();\n  }, [analysisId]);\n\n  // Add a new effect to fetch charts when analysis loads or ID changes\n  useEffect(() => {\n    if (analysisId && analysis !== null && analysis !== void 0 && analysis.id) {\n      fetchCharts();\n    }\n  }, [analysisId, analysis === null || analysis === void 0 ? void 0 : analysis.id, analysis === null || analysis === void 0 ? void 0 : analysis.vulnerableCount]);\n\n  // Function to fetch chart data\n  const fetchCharts = async () => {\n    setChartsLoading(true);\n    try {\n      // Use the new chart data endpoints for the Nivo charts\n      const [dependencyStatusResponse, vulnerabilityStatusResponse, vulnerabilitySeverityResponse, licenseDistributionResponse] = await Promise.all([api.charts.getDependencyStatusData(analysisId), api.charts.getVulnerabilityStatusData(analysisId), api.charts.getVulnerabilitySeverityData(analysisId), api.charts.getLicenseDistributionData(analysisId)]);\n\n      // Set the chart data from the responses\n      setCharts({\n        dependencyUpdates: dependencyStatusResponse.data,\n        // Data for the dependency status chart\n        vulnerabilityStatus: vulnerabilityStatusResponse.data,\n        // Data for the vulnerability status chart\n        vulnerabilitySeverity: vulnerabilitySeverityResponse.data,\n        // Data for the vulnerability severity chart\n        licenses: licenseDistributionResponse.data // Data for the license distribution chart\n      });\n      console.log('Chart data loaded successfully');\n    } catch (error) {\n      console.error('Error fetching chart data:', error);\n\n      // Fallback to using the analysis data directly\n      setCharts({\n        dependencyUpdates: analysis,\n        // Fallback to the analysis object for the dependency status chart\n        vulnerabilityStatus: analysis,\n        // Fallback to the analysis object for the vulnerability status chart\n        vulnerabilitySeverity: analysis,\n        // Fallback to the analysis object for the vulnerability severity chart\n        licenses: analysis // Fallback to the analysis object for the license distribution chart\n      });\n\n      // Show error notification\n      setSnackbar({\n        open: true,\n        message: 'Error loading chart data. Using local data instead.',\n        severity: 'warning'\n      });\n    } finally {\n      setChartsLoading(false);\n    }\n  };\n  const handleTabChange = (event, newValue) => {\n    console.log('Tab changed to:', newValue);\n    if (newValue === 4) {\n      console.log('License tab selected, analysis data:', analysis);\n    }\n    setTabValue(newValue);\n\n    // Auto refresh vulnerability status when switching to the vulnerabilities tab\n    if (newValue === 3 && analysis && analysis.vulnerabilityCheckStatus === 'IN_PROGRESS') {\n      console.log('Auto-refreshing vulnerability status when switching to vulnerabilities tab');\n      refreshVulnerabilityStatus();\n    }\n  };\n\n  // Filtering dependencies based on search query\n  const filteredDependencies = dependencies.filter(dep => {\n    const fullName = `${dep.groupId}:${dep.artifactId}:${dep.currentVersion}`.toLowerCase();\n    return fullName.includes(searchQuery.toLowerCase());\n  });\n\n  // Collecting all vulnerabilities from dependencies for the vulnerabilities tab\n  const allVulnerabilities = React.useMemo(() => {\n    const vulnerabilities = [];\n    dependencies.forEach(dep => {\n      if (dep.vulnerabilities && dep.vulnerabilities.length > 0) {\n        dep.vulnerabilities.forEach(vuln => {\n          vulnerabilities.push({\n            ...vuln,\n            dependency: `${dep.groupId}:${dep.artifactId}:${dep.currentVersion}`\n          });\n        });\n      }\n    });\n    return vulnerabilities;\n  }, [dependencies]);\n\n  // Add a refresh function\n  const refreshVulnerabilityStatus = async () => {\n    try {\n      var _response$data$depend4, _response$data$depend5;\n      // Show loading state immediately for better UX\n      setSnackbar({\n        open: true,\n        message: 'Refreshing vulnerability status...',\n        severity: 'info'\n      });\n      setVulnerabilitiesLoading(true);\n\n      // Add a small delay to ensure the UI reflects the loading state\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Fetch the latest analysis data\n      const response = await api.dependencyAnalysis.getById(analysisId);\n\n      // Calculate the progress percentage for the UI\n      const totalDeps = ((_response$data$depend4 = response.data.dependencies) === null || _response$data$depend4 === void 0 ? void 0 : _response$data$depend4.length) || 0;\n      const processedDeps = ((_response$data$depend5 = response.data.dependencies) === null || _response$data$depend5 === void 0 ? void 0 : _response$data$depend5.filter(d => d.vulnerableCount !== null).length) || 0;\n      const progressPercent = totalDeps > 0 ? Math.round(processedDeps / totalDeps * 100) : 0;\n\n      // Update the analysis with the latest data\n      const totalVulnerabilities = response.data.dependencies ? response.data.dependencies.reduce((total, dep) => total + (dep.vulnerableCount || 0), 0) : 0;\n      setAnalysis({\n        ...response.data,\n        vulnerableCount: totalVulnerabilities,\n        scanProgress: progressPercent,\n        processedDependencies: processedDeps,\n        totalDependencies: totalDeps,\n        status: response.data.vulnerabilityCheckStatus === 'IN_PROGRESS' ? 'in_progress' : response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'completed' : response.data.vulnerabilityCheckStatus === 'FAILED' ? 'failed' : response.data.status || 'completed'\n      });\n      if (response.data.dependencies) {\n        setDependencies(response.data.dependencies);\n      }\n\n      // Also update the charts with the latest data\n      fetchCharts();\n\n      // Check if vulnerability processing is still in progress\n      if (response.data.vulnerabilityCheckStatus === 'IN_PROGRESS') {\n        // Start polling if still in progress\n        pollForVulnerabilityUpdates();\n        setSnackbar({\n          open: true,\n          message: `Vulnerability scan is ${progressPercent}% complete. Continuing to monitor progress.`,\n          severity: 'info'\n        });\n      } else {\n        setVulnerabilitiesLoading(false);\n        setSnackbar({\n          open: true,\n          message: 'Vulnerability scan is complete!',\n          severity: 'success'\n        });\n      }\n    } catch (error) {\n      console.error('Error refreshing vulnerability status:', error);\n\n      // Provide specific error feedback based on the type of error\n      let errorMessage = 'Failed to refresh analysis data. Please try again.';\n      if (error.response) {\n        if (error.response.status === 404) {\n          errorMessage = 'Analysis not found. It may have been deleted.';\n        } else if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        }\n      } else if (error.request) {\n        errorMessage = 'Server not responding. Please check your connection.';\n      }\n      setSnackbar({\n        open: true,\n        message: errorMessage,\n        severity: 'error'\n      });\n\n      // Still stop the loading state even on error\n      setVulnerabilitiesLoading(false);\n    }\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbar({\n      ...snackbar,\n      open: false\n    });\n  };\n  const handleGenerateReport = async () => {\n    try {\n      setReportGenerating(true);\n      const response = await api.reports.generateFullReport(analysisId);\n      if (response.data.reportPath) {\n        // Download the report\n        api.reports.downloadReport(response.data.reportPath);\n        enqueueSnackbar('Report generated successfully', {\n          variant: 'success'\n        });\n      } else {\n        enqueueSnackbar('Failed to generate report', {\n          variant: 'error'\n        });\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n      enqueueSnackbar(`Error generating report: ${error.message || 'Unknown error'}`, {\n        variant: 'error'\n      });\n    } finally {\n      setReportGenerating(false);\n    }\n  };\n\n  // Add update dependency function\n  const handleUpdateDependency = async dependency => {\n    if (!dependency.latestVersion || dependency.isBomManaged) {\n      return;\n    }\n    try {\n      setUpdatingDependency(dependency.id);\n      await api.dependencyAnalysis.updateDependencyVersion(dependency.id, dependency.latestVersion);\n\n      // Refresh the analysis data\n      const response = await api.dependencyAnalysis.getById(analysisId);\n      setAnalysis(response.data);\n      setDependencies(response.data.dependencies);\n      enqueueSnackbar(`Successfully updated ${dependency.groupId}:${dependency.artifactId} to version ${dependency.latestVersion}`, {\n        variant: 'success'\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error updating dependency:', error);\n      enqueueSnackbar(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error updating dependency version', {\n        variant: 'error'\n      });\n    } finally {\n      setUpdatingDependency(null);\n    }\n  };\n  const handleDownloadUpdatedPom = () => {\n    try {\n      api.dependencyAnalysis.downloadUpdatedPom(analysisId);\n    } catch (error) {\n      console.error('Error downloading updated POM:', error);\n      enqueueSnackbar('Error downloading updated POM file', {\n        variant: 'error'\n      });\n    }\n  };\n\n  // Fetch the restricted licenses from settings when the tab is rendered\n  useEffect(() => {\n    fetchRestrictedLicenses();\n  }, []);\n  const fetchRestrictedLicenses = async () => {\n    try {\n      const response = await api.settings.getSettings();\n      console.log('Fetched settings for license checking:', response.data);\n      if (response.data && response.data.restrictedLicenses) {\n        setRestrictedLicenses(response.data.restrictedLicenses);\n        console.log('Updated restricted licenses from settings:', response.data.restrictedLicenses);\n      }\n    } catch (error) {\n      console.error('Error fetching restricted licenses from settings:', error);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        mt: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px 0'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Restricted License Issues\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 22\n        }, this),\n        onClick: fetchRestrictedLicenses,\n        size: \"small\",\n        children: \"Refresh Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Dependency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"License\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Recommendation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: [console.log('Current restricted licenses for filtering:', restrictedLicenses), analysis.dependencies && analysis.dependencies.filter(dep => {\n            // Skip dependencies without licenses\n            if (!dep.license) {\n              console.log(`Dependency ${dep.groupId}:${dep.artifactId} has no license`);\n              return true; // Missing licenses should be flagged\n            }\n\n            // Create a normalized version of license for easier comparison\n            const normalizedLicense = dep.license.toUpperCase();\n\n            // Check if the license contains any of the restricted licenses\n            const isRestricted = restrictedLicenses.some(restricted => normalizedLicense.includes(restricted.toUpperCase()));\n            if (isRestricted) {\n              console.log(`Dependency ${dep.groupId}:${dep.artifactId} has restricted license: ${dep.license}`);\n            }\n            return isRestricted;\n          }).map(dep => /*#__PURE__*/_jsxDEV(TableRow, {\n            hover: true,\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: [dep.groupId, \":\", dep.artifactId, \":\", dep.version || dep.currentVersion]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(Chip, {\n                label: dep.license || 'Unknown',\n                size: \"small\",\n                color: !dep.license ? 'warning' : restrictedLicenses.some(restricted => dep.license.toUpperCase().includes(restricted.toUpperCase()) && (restricted.toUpperCase() === 'GPL' || restricted.toUpperCase() === 'AGPL')) ? 'error' : restrictedLicenses.some(restricted => dep.license.toUpperCase().includes(restricted.toUpperCase())) ? 'warning' : 'default'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 683,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: !dep.license ? 'Missing License' : restrictedLicenses.some(restricted => dep.license.toUpperCase().includes(restricted.toUpperCase())) ? 'Restricted License' : 'Compatible License'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: !dep.license ? 'Verify license information with the library author' : dep.license.toUpperCase().includes('GPL') || dep.license.toUpperCase().includes('AGPL') ? 'Consider using a commercial license or alternative library' : dep.license.toUpperCase().includes('LGPL') ? 'Review LGPL compliance requirements for your distribution' : 'Review license terms and consult legal counsel if necessary'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 17\n            }, this)]\n          }, dep.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 15\n          }, this)), (!analysis.dependencies || analysis.dependencies.length === 0 || analysis.dependencies.filter(dep => {\n            if (!dep.license) return true;\n            const normalizedLicense = dep.license.toUpperCase();\n            return restrictedLicenses.some(restricted => normalizedLicense.includes(restricted.toUpperCase()));\n          }).length === 0) && /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: 4,\n              align: \"center\",\n              children: \"No license issues found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 720,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 630,\n    columnNumber: 5\n  }, this);\n};\nexport default AnalysisDetail;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","useLocation","useSnackbar","Typography","Paper","Box","Grid","Tabs","Tab","Card","CardContent","Divider","CircularProgress","Button","IconButton","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Chip","Tooltip","TextField","InputAdornment","Snackbar","Alert","List","ListItem","ListItemText","ListItemIcon","Switch","FormControlLabel","ArrowBack","ArrowBackIcon","Download","DownloadIcon","Share","ShareIcon","Search","SearchIcon","Warning","WarningIcon","CheckCircle","CheckCircleIcon","Info","InfoIcon","Lock","LockIcon","MoreVert","MoreVertIcon","Timeline","TimelineIcon","ContentCopy","ContentCopyIcon","FileDownload","FileDownloadIcon","Insights","InsightsIcon","SaveAlt","SaveAltIcon","Refresh","RefreshIcon","api","DependencyStatusChart","VulnerabilityChart","VulnerabilitySeverityChart","LicenseDistributionChart","VulnerabilityPieChart","VulnerabilityByDependencyChart","formatDate","BomManagedVersion","jsxDEV","_jsxDEV","SampleChart","title","type","sx","height","bgcolor","borderRadius","display","alignItems","justifyContent","flexDirection","p","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","TabPanel","props","value","index","other","role","hidden","id","AnalysisDetail","params","analysisId","navigate","loading","setLoading","vulnerabilitiesLoading","setVulnerabilitiesLoading","analysis","setAnalysis","tabValue","setTabValue","searchQuery","setSearchQuery","dependencies","setDependencies","error","setError","snackbar","setSnackbar","open","message","severity","charts","setCharts","dependencyUpdates","vulnerabilities","licenses","chartsLoading","setChartsLoading","reportGenerating","setReportGenerating","enqueueSnackbar","updatingDependency","setUpdatingDependency","isDialogOpen","setIsDialogOpen","pdfDownloadUrl","setPdfDownloadUrl","restrictedLicenses","setRestrictedLicenses","pollForVulnerabilityUpdates","console","log","intervalId","setInterval","_response$data$depend","_response$data$depend2","_response$data$depend3","response","dependencyAnalysis","getVulnerabilityStatus","status","data","vulnerabilityCheckStatus","length","totalDeps","processedDeps","filter","d","vulnerableCount","progressPercent","Math","round","totalVulnerabilities","reduce","total","dep","scanProgress","processedDependencies","totalDependencies","clearInterval","setTimeout","finalResponse","getById","finalVulnerabilities","fetchCharts","refreshError","pollingError","fetchAnalysisData","forEach","groupId","artifactId","license","licenseIssues","mockAnalysis","parseInt","projectId","projectName","date","Date","toISOString","split","outdatedDependencies","dependencyStatusResponse","vulnerabilityStatusResponse","vulnerabilitySeverityResponse","licenseDistributionResponse","Promise","all","getDependencyStatusData","getVulnerabilityStatusData","getVulnerabilitySeverityData","getLicenseDistributionData","vulnerabilityStatus","vulnerabilitySeverity","handleTabChange","event","newValue","refreshVulnerabilityStatus","filteredDependencies","fullName","currentVersion","toLowerCase","includes","allVulnerabilities","useMemo","vuln","push","dependency","_response$data$depend4","_response$data$depend5","resolve","errorMessage","request","handleCloseSnackbar","handleGenerateReport","reports","generateFullReport","reportPath","downloadReport","handleUpdateDependency","latestVersion","isBomManaged","updateDependencyVersion","_error$response","_error$response$data","handleDownloadUpdatedPom","downloadUpdatedPom","fetchRestrictedLicenses","settings","getSettings","mt","style","padding","mb","startIcon","onClick","size","component","normalizedLicense","toUpperCase","isRestricted","some","restricted","map","hover","version","label","colSpan","align"],"sources":["/Users/yeldan/IdeaProjects/MavenAnalyzer/MavenAnalyzerUI/src/pages/AnalysisDetail.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport {\n  Typography,\n  Paper,\n  Box,\n  Grid,\n  Tabs,\n  Tab,\n  Card,\n  CardContent,\n  Divider,\n  CircularProgress,\n  Button,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Tooltip,\n  TextField,\n  InputAdornment,\n  Snackbar,\n  Alert,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Switch,\n  FormControlLabel,\n} from '@mui/material';\nimport {\n  ArrowBack as ArrowBackIcon,\n  Download as DownloadIcon,\n  Share as ShareIcon,\n  Search as SearchIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckCircleIcon,\n  Info as InfoIcon,\n  Lock as LockIcon,\n  MoreVert as MoreVertIcon,\n  Timeline as TimelineIcon,\n  ContentCopy as ContentCopyIcon,\n  FileDownload as FileDownloadIcon,\n  Insights as InsightsIcon,\n  SaveAlt as SaveAltIcon,\n  Refresh as RefreshIcon,\n} from '@mui/icons-material';\nimport api from '../services/api';\nimport { DependencyStatusChart, VulnerabilityChart, VulnerabilitySeverityChart, LicenseDistributionChart, VulnerabilityPieChart, VulnerabilityByDependencyChart } from '../components/charts';\nimport { formatDate } from '../utils/dateUtils';\nimport BomManagedVersion from '../components/BomManagedVersion';\n\n// Sample chart component (kept for backward compatibility with other tabs)\nconst SampleChart = ({ title, type }) => {\n  return (\n    <Box\n      sx={{\n        height: 250,\n        bgcolor: 'rgba(33, 150, 243, 0.1)',\n        borderRadius: 1,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        p: 2,\n      }}\n    >\n      <Typography variant=\"subtitle1\" gutterBottom>\n        {title}\n      </Typography>\n      <Typography color=\"text.secondary\">\n        {type} Chart\n      </Typography>\n    </Box>\n  );\n};\n\n// Tab panel component for tab content\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`analysis-tabpanel-${index}`}\n      aria-labelledby={`analysis-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst AnalysisDetail = () => {\n  const params = useParams();\n  const analysisId = params.id;\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [vulnerabilitiesLoading, setVulnerabilitiesLoading] = useState(true);\n  const [analysis, setAnalysis] = useState(null);\n  const [tabValue, setTabValue] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [dependencies, setDependencies] = useState([]);\n  const [error, setError] = useState(null);\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n  const [charts, setCharts] = useState({\n    dependencyUpdates: null,\n    vulnerabilities: null,\n    licenses: null\n  });\n  const [chartsLoading, setChartsLoading] = useState(false);\n  const [reportGenerating, setReportGenerating] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n  const [updatingDependency, setUpdatingDependency] = useState(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [pdfDownloadUrl, setPdfDownloadUrl] = useState(null);\n  const [restrictedLicenses, setRestrictedLicenses] = useState(['GPL', 'AGPL', 'LGPL', 'UNKNOWN']);\n\n  // Poll for vulnerability updates\n  const pollForVulnerabilityUpdates = async () => {\n    try {\n      console.log(`Starting vulnerability polling for analysis ID: ${analysisId}`);\n      \n      // Set an interval to check for vulnerability updates\n      const intervalId = setInterval(async () => {\n        try {\n          // Use the specific vulnerability status endpoint for more efficient polling\n          console.log(`Polling vulnerability status for analysis ID: ${analysisId}`);\n          const response = await api.dependencyAnalysis.getVulnerabilityStatus(analysisId);\n          \n          console.log(`Received vulnerability status for analysis ID: ${analysisId}`, {\n            status: response.data.vulnerabilityCheckStatus,\n            dependencies: response.data.dependencies?.length || 0\n          });\n          \n          // Calculate the progress percentage for the UI\n          const totalDeps = response.data.dependencies?.length || 0;\n          const processedDeps = response.data.dependencies?.filter(d => d.vulnerableCount !== null).length || 0;\n          const progressPercent = totalDeps > 0 ? Math.round((processedDeps / totalDeps) * 100) : 0;\n          \n          // Update the analysis with the latest data\n          const totalVulnerabilities = response.data.dependencies \n            ? response.data.dependencies.reduce((total, dep) => total + (dep.vulnerableCount || 0), 0)\n            : 0;\n            \n          setAnalysis({\n            ...response.data,\n            vulnerableCount: totalVulnerabilities,\n            scanProgress: progressPercent,\n            processedDependencies: processedDeps,\n            totalDependencies: totalDeps,\n            status: response.data.vulnerabilityCheckStatus === 'IN_PROGRESS' ? 'in_progress' : \n                   response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'completed' :\n                   response.data.vulnerabilityCheckStatus === 'FAILED' ? 'failed' :\n                   response.data.status || 'completed'\n          });\n          \n          if (response.data.dependencies) {\n            setDependencies(response.data.dependencies);\n          }\n          \n          // If vulnerability checking is complete, stop polling\n          if (response.data.vulnerabilityCheckStatus !== 'IN_PROGRESS') {\n            console.log(`Vulnerability check completed for analysis ID: ${analysisId}. Status: ${response.data.vulnerabilityCheckStatus}`);\n            clearInterval(intervalId);\n            setVulnerabilitiesLoading(false);\n            \n            // Show notification when status changes to completed\n            setSnackbar({\n              open: true,\n              message: `Analysis status updated: ${response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'Completed' : response.data.vulnerabilityCheckStatus}`,\n              severity: response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'success' : 'info'\n            });\n            \n            // Force a refresh of the data to ensure we have the final state\n            setTimeout(async () => {\n              try {\n                const finalResponse = await api.dependencyAnalysis.getById(analysisId);\n                \n                // Update one last time with complete data\n                const finalVulnerabilities = finalResponse.data.dependencies \n                  ? finalResponse.data.dependencies.reduce((total, dep) => total + (dep.vulnerableCount || 0), 0)\n                  : 0;\n                  \n                setAnalysis({\n                  ...finalResponse.data,\n                  vulnerableCount: finalVulnerabilities,\n                  status: finalResponse.data.vulnerabilityCheckStatus === 'IN_PROGRESS' ? 'in_progress' : \n                         finalResponse.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'completed' :\n                         finalResponse.data.vulnerabilityCheckStatus === 'FAILED' ? 'failed' :\n                         finalResponse.data.status || 'completed'\n                });\n                \n                if (finalResponse.data.dependencies) {\n                  setDependencies(finalResponse.data.dependencies);\n                }\n                \n                // Refresh the chart data after vulnerability scan completes\n                fetchCharts();\n                \n                console.log(`Final refresh completed for analysis ID: ${analysisId}`);\n                \n                // Success notification\n                setSnackbar({\n                  open: true,\n                  message: 'Vulnerability scanning completed',\n                  severity: 'success'\n                });\n              } catch (refreshError) {\n                console.error('Error refreshing final data:', refreshError);\n                setSnackbar({\n                  open: true,\n                  message: 'Error loading final vulnerability data. You can try refreshing manually.',\n                  severity: 'warning'\n                });\n              }\n            }, 1000);\n          }\n        } catch (pollingError) {\n          console.error('Error during polling interval:', pollingError);\n          \n          // Show a warning but don't stop polling yet\n          setSnackbar({\n            open: true,\n            message: 'Error checking vulnerability status. Retrying...',\n            severity: 'warning'\n          });\n        }\n      }, 3000); // Check every 3 seconds\n      \n      // Clean up the interval when the component unmounts\n      return () => {\n        console.log(`Cleaning up polling interval for analysis ID: ${analysisId}`);\n        clearInterval(intervalId);\n      };\n    } catch (error) {\n      console.error('Error setting up vulnerability polling:', error);\n      setVulnerabilitiesLoading(false);\n      setSnackbar({\n        open: true,\n        message: 'Could not set up vulnerability status monitoring. Try refreshing the page.',\n        severity: 'error'\n      });\n    }\n  };\n\n  useEffect(() => {\n    // Log the ID to verify it's available\n    console.log(\"Current analysis ID from params:\", analysisId);\n    \n    // Don't proceed if analysisId is undefined or null\n    if (!analysisId) {\n      console.error(\"Analysis ID is missing from URL parameters\");\n      setError(\"Missing analysis ID. Please select a valid analysis.\");\n      setLoading(false);\n      return;\n    }\n\n    // Fetch analysis data\n    const fetchAnalysisData = async () => {\n      setLoading(true);\n      try {\n        // Get analysis details\n        console.log(`Fetching analysis data for ID: ${analysisId}`);\n        const response = await api.dependencyAnalysis.getById(analysisId);\n        console.log('Analysis API response:', response.data);\n        \n        // Additional debugging for dependencies\n        const dependencies = response.data.dependencies || [];\n        console.log(`Received ${dependencies.length} dependencies from API`);\n        \n        // Log license information for all dependencies\n        dependencies.forEach(dep => {\n          console.log(`Dependency ${dep.groupId}:${dep.artifactId} - License: ${dep.license || 'NONE'}`);\n        });\n        \n        // Log license issues count\n        console.log('License issues count:', response.data.licenseIssues);\n        \n        // Calculate total vulnerabilities for the header stats\n        const totalVulnerabilities = dependencies.reduce((total, dep) => total + (dep.vulnerableCount || 0), 0);\n        \n        // Combine the analysis data with calculated values\n        setAnalysis({\n          ...response.data,\n          vulnerableCount: totalVulnerabilities,\n          // Map the vulnerabilityCheckStatus to a UI-friendly status\n          status: response.data.vulnerabilityCheckStatus === 'IN_PROGRESS' ? 'in_progress' : \n                 response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'completed' :\n                 response.data.vulnerabilityCheckStatus === 'FAILED' ? 'failed' :\n                 response.data.status || 'completed'\n        });\n        \n        // If the analysis contains dependencies, set them\n        if (dependencies.length > 0) {\n          setDependencies(dependencies);\n          console.log(`Loaded ${dependencies.length} dependencies`);\n        } else {\n          console.log(\"No dependencies found in the response data\");\n        }\n        \n        // If vulnerability checking is still in progress, start a polling mechanism\n        if (response.data.vulnerabilityCheckStatus === 'IN_PROGRESS') {\n          pollForVulnerabilityUpdates();\n        } else {\n          setVulnerabilitiesLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching analysis:', error);\n        setError(`Failed to load analysis data: ${error.message || 'Unknown error'}`);\n        setSnackbar({\n          open: true,\n          message: `Error loading analysis: ${error.message || 'Unknown error'}`,\n          severity: 'error'\n        });\n        \n        // Set mock data for development/fallback\n        const mockAnalysis = {\n          id: parseInt(analysisId),\n          projectId: 1,\n          projectName: 'Error Loading Project',\n          date: new Date().toISOString().split('T')[0],\n          status: 'error',\n          totalDependencies: 0,\n          outdatedDependencies: 0,\n          vulnerabilities: 0,\n          licenseIssues: 0,\n        };\n        setAnalysis(mockAnalysis);\n        setDependencies([]);\n        setVulnerabilitiesLoading(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAnalysisData();\n  }, [analysisId]);\n\n  // Add a new effect to fetch charts when analysis loads or ID changes\n  useEffect(() => {\n    if (analysisId && analysis?.id) {\n      fetchCharts();\n    }\n  }, [\n    analysisId, \n    analysis?.id, \n    analysis?.vulnerableCount\n  ]);\n\n  // Function to fetch chart data\n  const fetchCharts = async () => {\n    setChartsLoading(true);\n    try {\n      // Use the new chart data endpoints for the Nivo charts\n      const [\n        dependencyStatusResponse, \n        vulnerabilityStatusResponse, \n        vulnerabilitySeverityResponse,\n        licenseDistributionResponse\n      ] = await Promise.all([\n        api.charts.getDependencyStatusData(analysisId),\n        api.charts.getVulnerabilityStatusData(analysisId),\n        api.charts.getVulnerabilitySeverityData(analysisId),\n        api.charts.getLicenseDistributionData(analysisId)\n      ]);\n      \n      // Set the chart data from the responses\n      setCharts({\n        dependencyUpdates: dependencyStatusResponse.data, // Data for the dependency status chart\n        vulnerabilityStatus: vulnerabilityStatusResponse.data, // Data for the vulnerability status chart\n        vulnerabilitySeverity: vulnerabilitySeverityResponse.data, // Data for the vulnerability severity chart\n        licenses: licenseDistributionResponse.data // Data for the license distribution chart\n      });\n      \n      console.log('Chart data loaded successfully');\n    } catch (error) {\n      console.error('Error fetching chart data:', error);\n      \n      // Fallback to using the analysis data directly\n      setCharts({\n        dependencyUpdates: analysis, // Fallback to the analysis object for the dependency status chart\n        vulnerabilityStatus: analysis, // Fallback to the analysis object for the vulnerability status chart\n        vulnerabilitySeverity: analysis, // Fallback to the analysis object for the vulnerability severity chart\n        licenses: analysis // Fallback to the analysis object for the license distribution chart\n      });\n      \n      // Show error notification\n      setSnackbar({\n        open: true,\n        message: 'Error loading chart data. Using local data instead.',\n        severity: 'warning'\n      });\n    } finally {\n      setChartsLoading(false);\n    }\n  };\n\n  const handleTabChange = (event, newValue) => {\n    console.log('Tab changed to:', newValue);\n    if (newValue === 4) {\n      console.log('License tab selected, analysis data:', analysis);\n    }\n    setTabValue(newValue);\n    \n    // Auto refresh vulnerability status when switching to the vulnerabilities tab\n    if (newValue === 3 && analysis && analysis.vulnerabilityCheckStatus === 'IN_PROGRESS') {\n      console.log('Auto-refreshing vulnerability status when switching to vulnerabilities tab');\n      refreshVulnerabilityStatus();\n    }\n  };\n\n  // Filtering dependencies based on search query\n  const filteredDependencies = dependencies.filter(dep => {\n    const fullName = `${dep.groupId}:${dep.artifactId}:${dep.currentVersion}`.toLowerCase();\n    return fullName.includes(searchQuery.toLowerCase());\n  });\n  \n  // Collecting all vulnerabilities from dependencies for the vulnerabilities tab\n  const allVulnerabilities = React.useMemo(() => {\n    const vulnerabilities = [];\n    dependencies.forEach(dep => {\n      if (dep.vulnerabilities && dep.vulnerabilities.length > 0) {\n        dep.vulnerabilities.forEach(vuln => {\n          vulnerabilities.push({\n            ...vuln,\n            dependency: `${dep.groupId}:${dep.artifactId}:${dep.currentVersion}`\n          });\n        });\n      }\n    });\n    return vulnerabilities;\n  }, [dependencies]);\n\n  // Add a refresh function\n  const refreshVulnerabilityStatus = async () => {\n    try {\n      // Show loading state immediately for better UX\n      setSnackbar({\n        open: true,\n        message: 'Refreshing vulnerability status...',\n        severity: 'info'\n      });\n      \n      setVulnerabilitiesLoading(true);\n      \n      // Add a small delay to ensure the UI reflects the loading state\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Fetch the latest analysis data\n      const response = await api.dependencyAnalysis.getById(analysisId);\n      \n      // Calculate the progress percentage for the UI\n      const totalDeps = response.data.dependencies?.length || 0;\n      const processedDeps = response.data.dependencies?.filter(d => d.vulnerableCount !== null).length || 0;\n      const progressPercent = totalDeps > 0 ? Math.round((processedDeps / totalDeps) * 100) : 0;\n      \n      // Update the analysis with the latest data\n      const totalVulnerabilities = response.data.dependencies \n        ? response.data.dependencies.reduce((total, dep) => total + (dep.vulnerableCount || 0), 0)\n        : 0;\n        \n      setAnalysis({\n        ...response.data,\n        vulnerableCount: totalVulnerabilities,\n        scanProgress: progressPercent,\n        processedDependencies: processedDeps,\n        totalDependencies: totalDeps,\n        status: response.data.vulnerabilityCheckStatus === 'IN_PROGRESS' ? 'in_progress' : \n                response.data.vulnerabilityCheckStatus === 'COMPLETED' ? 'completed' :\n                response.data.vulnerabilityCheckStatus === 'FAILED' ? 'failed' :\n                response.data.status || 'completed'\n      });\n      \n      if (response.data.dependencies) {\n        setDependencies(response.data.dependencies);\n      }\n      \n      // Also update the charts with the latest data\n      fetchCharts();\n      \n      // Check if vulnerability processing is still in progress\n      if (response.data.vulnerabilityCheckStatus === 'IN_PROGRESS') {\n        // Start polling if still in progress\n        pollForVulnerabilityUpdates();\n        \n        setSnackbar({\n          open: true,\n          message: `Vulnerability scan is ${progressPercent}% complete. Continuing to monitor progress.`,\n          severity: 'info'\n        });\n      } else {\n        setVulnerabilitiesLoading(false);\n        \n        setSnackbar({\n          open: true,\n          message: 'Vulnerability scan is complete!',\n          severity: 'success'\n        });\n      }\n    } catch (error) {\n      console.error('Error refreshing vulnerability status:', error);\n      \n      // Provide specific error feedback based on the type of error\n      let errorMessage = 'Failed to refresh analysis data. Please try again.';\n      \n      if (error.response) {\n        if (error.response.status === 404) {\n          errorMessage = 'Analysis not found. It may have been deleted.';\n        } else if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        }\n      } else if (error.request) {\n        errorMessage = 'Server not responding. Please check your connection.';\n      }\n      \n      setSnackbar({\n        open: true,\n        message: errorMessage,\n        severity: 'error'\n      });\n      \n      // Still stop the loading state even on error\n      setVulnerabilitiesLoading(false);\n    }\n  };\n\n  const handleCloseSnackbar = () => {\n    setSnackbar({ ...snackbar, open: false });\n  };\n\n  const handleGenerateReport = async () => {\n    try {\n      setReportGenerating(true);\n      const response = await api.reports.generateFullReport(analysisId);\n      \n      if (response.data.reportPath) {\n        // Download the report\n        api.reports.downloadReport(response.data.reportPath);\n        enqueueSnackbar('Report generated successfully', { variant: 'success' });\n      } else {\n        enqueueSnackbar('Failed to generate report', { variant: 'error' });\n      }\n    } catch (error) {\n      console.error('Error generating report:', error);\n      enqueueSnackbar(`Error generating report: ${error.message || 'Unknown error'}`, { variant: 'error' });\n    } finally {\n      setReportGenerating(false);\n    }\n  };\n\n  // Add update dependency function\n  const handleUpdateDependency = async (dependency) => {\n    if (!dependency.latestVersion || dependency.isBomManaged) {\n      return;\n    }\n\n    try {\n      setUpdatingDependency(dependency.id);\n      await api.dependencyAnalysis.updateDependencyVersion(dependency.id, dependency.latestVersion);\n      \n      // Refresh the analysis data\n      const response = await api.dependencyAnalysis.getById(analysisId);\n      setAnalysis(response.data);\n      setDependencies(response.data.dependencies);\n      \n      enqueueSnackbar(`Successfully updated ${dependency.groupId}:${dependency.artifactId} to version ${dependency.latestVersion}`, {\n        variant: 'success'\n      });\n    } catch (error) {\n      console.error('Error updating dependency:', error);\n      enqueueSnackbar(error.response?.data?.message || 'Error updating dependency version', {\n        variant: 'error'\n      });\n    } finally {\n      setUpdatingDependency(null);\n    }\n  };\n\n  const handleDownloadUpdatedPom = () => {\n    try {\n      api.dependencyAnalysis.downloadUpdatedPom(analysisId);\n    } catch (error) {\n      console.error('Error downloading updated POM:', error);\n      enqueueSnackbar('Error downloading updated POM file', { variant: 'error' });\n    }\n  };\n\n  // Fetch the restricted licenses from settings when the tab is rendered\n  useEffect(() => {\n    fetchRestrictedLicenses();\n  }, []);\n  \n  const fetchRestrictedLicenses = async () => {\n    try {\n      const response = await api.settings.getSettings();\n      console.log('Fetched settings for license checking:', response.data);\n      if (response.data && response.data.restrictedLicenses) {\n        setRestrictedLicenses(response.data.restrictedLicenses);\n        console.log('Updated restricted licenses from settings:', response.data.restrictedLicenses);\n      }\n    } catch (error) {\n      console.error('Error fetching restricted licenses from settings:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 10 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <div style={{ padding: '20px 0' }}>\n      {/* Restricted License Issues Section */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\">\n          Restricted License Issues\n        </Typography>\n        <Button \n          variant=\"outlined\" \n          startIcon={<RefreshIcon />} \n          onClick={fetchRestrictedLicenses}\n          size=\"small\"\n        >\n          Refresh Settings\n        </Button>\n      </Box>\n      \n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Dependency</TableCell>\n              <TableCell>License</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Recommendation</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {console.log('Current restricted licenses for filtering:', restrictedLicenses)}\n            {analysis.dependencies && analysis.dependencies.filter(dep => {\n              // Skip dependencies without licenses\n              if (!dep.license) {\n                console.log(`Dependency ${dep.groupId}:${dep.artifactId} has no license`);\n                return true; // Missing licenses should be flagged\n              }\n              \n              // Create a normalized version of license for easier comparison\n              const normalizedLicense = dep.license.toUpperCase();\n              \n              // Check if the license contains any of the restricted licenses\n              const isRestricted = restrictedLicenses.some(restricted => \n                normalizedLicense.includes(restricted.toUpperCase())\n              );\n              \n              if (isRestricted) {\n                console.log(`Dependency ${dep.groupId}:${dep.artifactId} has restricted license: ${dep.license}`);\n              }\n              return isRestricted;\n            }).map(dep => (\n              <TableRow key={dep.id} hover>\n                <TableCell>\n                  {dep.groupId}:{dep.artifactId}:{dep.version || dep.currentVersion}\n                </TableCell>\n                <TableCell>\n                  <Chip \n                    label={dep.license || 'Unknown'} \n                    size=\"small\"\n                    color={!dep.license ? 'warning' : \n                           restrictedLicenses.some(restricted => \n                             (dep.license.toUpperCase().includes(restricted.toUpperCase())) && \n                             (restricted.toUpperCase() === 'GPL' || restricted.toUpperCase() === 'AGPL')\n                           ) ? 'error' : \n                           restrictedLicenses.some(restricted => \n                             dep.license.toUpperCase().includes(restricted.toUpperCase())\n                           ) ? 'warning' : 'default'}\n                  />\n                </TableCell>\n                <TableCell>\n                  {!dep.license ? 'Missing License' : \n                   restrictedLicenses.some(restricted => \n                     dep.license.toUpperCase().includes(restricted.toUpperCase())\n                   ) ? 'Restricted License' : 'Compatible License'}\n                </TableCell>\n                <TableCell>\n                  {!dep.license ? 'Verify license information with the library author' : \n                   dep.license.toUpperCase().includes('GPL') || dep.license.toUpperCase().includes('AGPL') ? \n                     'Consider using a commercial license or alternative library' :\n                   dep.license.toUpperCase().includes('LGPL') ? \n                     'Review LGPL compliance requirements for your distribution' :\n                   'Review license terms and consult legal counsel if necessary'}\n                </TableCell>\n              </TableRow>\n            ))}\n            {(!analysis.dependencies || analysis.dependencies.length === 0 || \n              analysis.dependencies.filter(dep => {\n                if (!dep.license) return true;\n                const normalizedLicense = dep.license.toUpperCase();\n                return restrictedLicenses.some(restricted => \n                  normalizedLicense.includes(restricted.toUpperCase())\n                );\n              }).length === 0) && (\n              <TableRow>\n                <TableCell colSpan={4} align=\"center\">\n                  No license issues found\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default AnalysisDetail; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}